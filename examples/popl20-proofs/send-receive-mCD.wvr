; -s yices-smtinterpol -m total-progress-context-opt --semi -b rr
(var queue (Int) Int)
(var front back Int)
(var sum Int)
(var assert b Bool)
(use
assert
b
false
true
(<= back front)
(<= back (+ front 1))
(<= front (+ back (- 1)))
(= back front)
(= (+ back (- front)) 0)
(=> b assert)
(=> (not b) assert)
(=> (not (or (not (<= (- sum) 0)) (not (<= (+ sum (- 1)) 0)))) assert)
(and assert b)
(and assert (not b))
(and b assert)
(and (<= sum 0) (<= 0 sum))
(and (<= sum 0) (<= 0 sum) (<= back (+ front 1)) (<= front (+ back (- 1))) (= 1 (queue front)))
(and (<= sum 0) (<= 0 sum) (= back front))
(and (<= sum 0) (<= 0 sum) (= 1 (queue front)))
(and (<= sum 0) (<= 0 sum) (= 1 (queue front)) (<= back (+ front 1)) (<= front (+ back (- 1))))
(and (<= sum 1) (<= 0 (+ sum (- 1))))
(and (<= sum 1) (<= 0 (+ sum (- 1))) (= (- 1) (queue front)))
(and (<= sum 1) (<= 0 (+ sum (- 1))) (and (not (<= (+ back (- front) 1) 0)) (<= back front)))
(and (<= 0 sum) (<= front (+ back (- 1))) (<= back (+ front 1)) (<= sum 0) (= 1 (queue front)))
(and (<= 0 sum) (<= sum 0))
(and (<= 0 sum) (<= sum 0) (<= back (+ front 1)) (<= front (+ back (- 1))) (= 1 (queue front)))
(and (<= 0 sum) (<= sum 0) (<= back (+ front 1)) (= 1 (queue front)))
(and (<= 0 sum) (<= sum 0) (<= front (+ back (- 1))) (<= back (+ front 1)) (= 1 (queue front)))
(and (<= 0 sum) (<= sum 0) (= back front))
(and (<= 0 sum) (<= sum 0) (= 1 (queue front)))
(and (<= 0 sum) (<= sum 0) (= 1 (queue front)) (<= back (+ front 1)))
(and (<= 0 sum) (<= sum 0) (= 1 (queue front)) (<= back (+ front 1)) (<= front (+ back (- 1))))
(and (<= 0 sum) (<= sum 0) (= 1 (queue front)) (<= front (+ back (- 1))) (<= back (+ front 1)))
(and (<= 0 sum) (<= sum 0) (= (+ back (- front)) 0))
(and (<= 0 sum) (<= sum 0) (and (<= (+ back (- front)) 0) (<= front back)))
(and (<= 0 sum) (<= sum 0) (and (<= (+ back (- 1)) (+ front 1)) (or (<= (+ back (- 1)) (+ (+ front 1) (- 1))) (= (- 1) (queue (+ front 1))))) (= 1 (queue front)))
(and (<= 0 sum) (<= sum 0) (or (<= (+ back (- 1)) (+ (+ front 2) (- 1))) (= 1 (queue (+ back (- 1))))) (and (<= (+ back (- 2)) (+ front 1)) (or (<= (+ back (- 2)) (+ (+ front 1) (- 1))) (= (- 1) (queue (+ front 1))))) (= 1 (queue front)))
(and (<= 0 sum) (= 1 (queue front)) (<= sum 0))
(and (<= 0 sum) (=> (not (= back front)) false) (<= sum 0))
(and (<= 0 (+ sum (- 1))) (<= front (+ back (- 1))) (<= back (+ front 1)) (= (- 1) (queue front)) (<= sum 1))
(and (<= 0 (+ sum (- 1))) (<= sum 1))
(and (<= 0 (+ sum (- 1))) (<= sum 1) (<= back front))
(and (<= 0 (+ sum (- 1))) (<= sum 1) (<= front (+ back (- 1))) (<= back (+ front 1)) (= (- 1) (queue front)))
(and (<= 0 (+ sum (- 1))) (<= sum 1) (= (- 1) (queue front)))
(and (<= 0 (+ sum (- 1))) (<= sum 1) (and (<= (+ back (- 1)) (+ front 1)) (or (<= (+ back (- 1)) (+ (+ front 1) (- 1))) (= 1 (queue (+ back (- 1)))))) (or (= (- 1) (queue front)) (<= back (+ front 1))))
(and (<= 0 (+ sum (- 1))) (<= sum 1) (and (not (<= (+ back (- front) 1) 0)) (<= back front)))
(and (<= 0 (+ sum (- 1))) (<= sum 1) (or (= (- 1) (queue front)) (<= back front)))
(and (= (+ back (- front)) 0) (<= 0 (+ sum (- 1))) (<= sum 1))
(and (= (- 1) (queue front)) (<= 0 (+ sum (- 1))) (<= sum 1))
(and (and (<= sum 0) (<= 0 sum)) (= back front))
(and (and (<= 0 sum) (<= sum 0)) (= back front))
(and (and (= (- 1) (queue (+ front 1))) (<= 0 sum) (<= sum 0)) (= 1 (queue front)))
(not assert)
(not b)
(or (and (<= 0 sum) (<= sum 0) (= 1 (queue front))) (<= back front))
(or (not (<= (- sum) 0)) (not (<= (+ sum (- 1)) 0)))
)

(assume (= front back))
(assume (= sum 0))
(assume assert)
(assume b)

(par
  (while assert
    (atomic
      (assume (> back front))
      (set! sum (+ sum (queue front)))
      (set! front (+ front 1))))
  (while assert
    (if b
      (atomic
        (assume (= (queue back) 1))
        (set! back (+ back 1)))
      (atomic
        (assume (= (queue back) (- 1)))
        (set! back (+ back 1))))
    (set! b (not b)))
  (set! assert (and (<= 0 sum) (<= sum 1))))
