; -s yices-smtinterpol -m total-progress-context-opt --semi -b rr
(var q1 (Int) Int)
(var q1-front q1-back Int)
(var q2 (Int) Int)
(var q2-front q2-back Int)
(var i j k l s t N Int)
(var f g Bool)
(use
f
g
false
true
(<= q1-front (+ q1-back (- 1)))
(<= q1-front (+ q1-back (- 2)))
(<= q2-front (+ q2-back (- 1)))
(<= 0 (+ k (- 1)))
(<= 0 (+ (+ (q2 q2-front) 1) (- 2)))
(<= 0 (+ (+ (q2 (+ q2-front 1)) 1) (- 2)))
(<= (+ N (- i)) 0)
(= q2-back q2-front)
(= 2 (q1 q1-front))
(= 2 (q1 (+ q1-front 1)))
(= (+ j (- k) (- 1)) 0)
(= (+ j (- 1)) (q2 q2-front))
(= (+ j (- 2)) 0)
(= (+ q1-back (- q1-front)) 0)
(= (+ q2-back (- q2-front)) 0)
(= (+ q2-front (- q2-back)) 0)
(=> f g)
(=> f (<= (+ N (- i)) 0))
(=> f (not (<= (+ N (- i)) 0)))
(=> g f)
(=> g (<= (+ N (- i)) 0))
(=> g (not f))
(=> g (not (<= (+ N (- i)) 0)))
(=> (not f) g)
(=> (not f) (<= (+ N (- i)) 0))
(=> (not g) (<= (+ N (- i)) 0))
(=> (not g) (not f))
(and f g)
(and f (<= (+ N (- i)) 0))
(and f (not (<= (+ N (- i)) 0)))
(and g (<= (+ N (- i)) 0))
(and g (not (<= (+ N (- i)) 0)))
(and (<= q1-back (+ q1-front 1)) (<= q1-front (+ q1-back (- 1))) (= (+ q2-back (- q2-front)) 0))
(and (<= q1-front (+ q1-back (- 1))) (<= q1-back (+ q1-front 1)))
(and (<= s (* 2 t)) (<= (* 2 t) s) (= q1-back q1-front) (= q2-back q2-front))
(and (<= s (* 2 t)) (<= (* 2 t) s) (= q2-back q2-front) (= q1-back q1-front))
(and (<= s (* 2 t)) (<= (* 2 t) s) (= q2-back q2-front) (= 2 (q1 q1-front)) (<= q1-back (+ q1-front 1)))
(and (<= s (* 2 t)) (<= (* 2 t) s) (= q2-back q2-front) (= (+ q1-back (- q1-front)) 0))
(and (<= s (* 2 t)) (<= (* 2 t) s) (= 0 (q1 q1-front)) (= q2-back q2-front))
(and (<= s (* 2 t)) (<= (* 2 t) s) (= 0 (q1 q1-front)) (and (not (<= (+ q2-back (- q2-front) 1) 0)) (<= q2-back q2-front)))
(and (<= s (* 2 t)) (<= (* 2 t) s) (= 2 (q1 q1-front)) (= q2-back q2-front) (<= q1-back (+ q1-front 1)))
(and (<= s (+ (* 2 t) (* 2 k) 2)) (<= (+ (* 2 t) (* 2 k)) (+ s (- 2))))
(and (<= s (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t))) (<= (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t)) s))
(and (<= (+ N (- i)) 0) f)
(and (<= (+ N (- i)) 0) g)
(and (<= (+ q1-back (- q1-front)) 0) (not (<= (+ q1-back (- q1-front) 1) 0)) (= (+ j (- 2)) 0) (and (<= s (* 2 t)) (<= (* 2 t) s)) (= q2-back q2-front))
(and (<= (+ q1-back (- q1-front)) 0) (not (<= (+ q1-back (- q1-front) 1) 0)) (= (+ j (- 2)) 0) (and (<= s (* 2 t)) (<= (* 2 t) s)) (= (+ j (- 1)) (q2 q2-front)) (<= q2-back (+ q2-front 1)) (<= q2-front (+ q2-back (- 1))))
(and (<= (+ q1-back (- q1-front)) 0) (not (<= (+ q1-back (- q1-front) 1) 0)) (= (+ j (- 2)) 0) (and (<= s (+ (* 2 t) j)) (<= (+ (* 2 t) j) s)) (= (+ j (- 1)) (q2 q2-front)) (<= q2-back (+ q2-front 1)) (<= q2-front (+ q2-back (- 1))))
(and (= j 0) (and (<= s (* 2 t)) (<= (* 2 t) s)) (= q2-back q2-front))
(and (= j 0) (and (<= s (* 2 t)) (<= (* 2 t) s)) (= (+ j (- 1)) (q2 q2-front)))
(and (= j 0) (and (<= s (* 2 t)) (<= (* 2 t) s)) (and (not (<= (+ q2-back (- q2-front) 1) 0)) (<= q2-back q2-front)))
(and (= j 0) (and (<= s (+ j (* 2 k) (* 2 t))) (<= (+ j (* 2 k) (* 2 t)) s) (= (+ j (- 1)) (q2 q2-front))))
(and (= j 0) (and (<= s (+ j (* 2 t))) (<= (+ j (* 2 t)) s) (= (+ j (- 1)) (q2 q2-front))))
(and (= j 0) (and (<= s (+ (* 2 k) (* 2 t))) (<= (+ (* 2 k) (* 2 t)) s) (= (+ j (- 1)) (q2 q2-front))))
(and (= j 0) (and (<= s (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t) (- 2))) (<= (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t)) (+ s 2)) (<= q2-back (+ q2-front 1)) (<= q2-front (+ q2-back (- 1)))))
(and (= j 0) (and (<= s (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t) (- 2))) (<= (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t)) (+ s 2)) (= (+ j (- 1)) (q2 (+ q2-front 1)))))
(and (= q1-back q1-front) (= q2-back q2-front))
(and (= q2-back q2-front) (= q1-back q1-front))
(and (= q2-back q2-front) (= 2 (q1 q1-front)))
(and (= 0 (q1 q1-front)) (<= s (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t) (- 2))) (<= (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t)) (+ s 2)) (<= q2-back (+ q2-front 1)) (<= q2-front (+ q2-back (- 1))))
(and (= 0 (q1 q1-front)) (= (+ j (- 2)) 0) (and (<= s (+ (* 2 t) j)) (<= (+ (* 2 t) j) s)) (= (+ j (- 1)) (q2 q2-front)) (<= q2-back (+ q2-front 1)) (<= q2-front (+ q2-back (- 1))))
(and (= 2 (q1 q1-front)) (<= q2-front (+ q2-back (- 1))) (<= q2-back (+ q2-front 1)))
(and (= 2 (q1 q1-front)) (= q2-back q2-front))
(and (= (+ j (- k) (- 1)) 0) (= (+ j (- 2)) 0))
(and (= (+ j (- k) (- 1)) 0) (and (= j 0) (and (<= s (* 2 t)) (<= (* 2 t) s))))
(and (= (+ j (- k) (- 1)) 0) (and (= j 0) (and (<= s (+ (* 2 t) j)) (<= (+ (* 2 t) j) s))))
(and (= (+ j (- k) (- 1)) 0) (and (= j 0) (ite (not (<= (+ s (* (- 2) t) (- 1)) 0)) (=> (not (<= (+ s (* (- 2) t) (- 2)) 0)) (<= (+ s (* 2 k)) (+ (* 2 t) j))) (<= (+ (* 2 t) j) (+ s (* 2 k))))))
(and (= (+ j (- 2)) 0) (= q2-back q2-front))
(and (= (+ j (- 2)) 0) (= (+ j (- 1)) (q2 q2-front)))
(and (= (+ j (- 2)) 0) (= (+ j (- 1)) (q2 (+ q2-front 1))))
(and (= (+ j (- 2)) 0) (and (<= q2-front (+ q2-back (- 1))) (<= q2-back (+ q2-front 1))))
(and (= (+ j (- 2)) 0) (and (<= s (* 2 t)) (<= (* 2 t) s) (= q1-back q1-front) (<= q2-back q2-front) (<= q2-front q2-back)))
(and (= (+ j (- 2)) 0) (and (<= s (* 2 t)) (<= (* 2 t) s) (= 0 (q1 q1-front)) (<= q2-back q2-front) (<= q2-front q2-back)))
(and (= (+ j (- 2)) 0) (and (<= s (* 2 t)) (<= (* 2 t) s) (= (+ j (- 1)) (q2 q2-front)) (= 0 (q1 q1-front)) (<= q2-back (+ q2-front 1)) (<= q2-front (+ q2-back (- 1)))))
(and (= (+ j (- 2)) 0) (and (= (+ j (- k) (- 1)) 0) (and (<= s (* 2 t)) (<= (* 2 t) s)) (= 0 (q1 q1-front)) (and (not (<= (+ q2-back (- q2-front) 1) 0)) (<= q2-back q2-front))))
(and (= (+ j (- 2)) 0) (and (= (+ j (- k) (- 1)) 0) (and (<= s (+ j (* 2 t))) (<= (+ j (* 2 t)) s)) (= 0 (q1 q1-front)) (and (not (<= (+ q2-back (- q2-front) 1) 0)) (<= q2-back q2-front))))
(and (= (+ j (- 2)) 0) (and (= (+ j (- k) (- 1)) 0) (and (<= (+ s (* 2 k)) (+ j (* 2 t))) (<= (+ j (* 2 t)) (+ s (* 2 k)))) (= 0 (q1 q1-front)) (and (not (<= (+ q2-back (- q2-front) 1) 0)) (<= q2-back q2-front))))
(and (= (+ q1-back (- q1-front)) 0) (<= q2-front (+ q2-back (- 1))) (<= q2-back (+ q2-front 1)))
(and (= (+ q1-back (- q1-front)) 0) (= (+ q2-back (- q2-front)) 0))
(and (= (+ q2-back (- q2-front)) 0) (ite (= q1-back q1-front) (and (= (+ j (- 2)) 0) (and (<= s (* 2 t)) (<= (* 2 t) s))) (<= q1-back q1-front)))
(and (not (<= (+ N (- i)) 0)) g)
(and (not (<= (+ s (* (- 2) t) (- 1)) 0)) (<= s (+ (* 2 t) 2)))
(ite (= q1-back q1-front) (and (= (+ j (- 2)) 0) (and (<= s (* 2 t)) (<= (* 2 t) s) (= (+ j (- 1)) (q2 q2-front))) (<= q2-front (+ q2-back (- 1))) (<= q2-back (+ q2-front 1))) (<= q1-back q1-front))
(ite (= q1-back q1-front) (and (= (+ j (- 2)) 0) (and (= (+ j (- k) (- 1)) 0) (and (<= s (* 2 t)) (<= (* 2 t) s))) (<= q2-back q2-front) (<= q2-front q2-back)) (<= q1-back q1-front))
(ite (= q1-back q1-front) (and (= (+ j (- 2)) 0) (and (= (+ j (- k) (- 1)) 0) (and (<= s (+ (* 2 t) j)) (<= (+ (* 2 t) j) s))) (<= q2-back q2-front) (<= q2-front q2-back)) (<= q1-back q1-front))
(ite (= q1-back q1-front) (and (= (+ j (- 2)) 0) (and (= (+ j (- k) (- 1)) 0) (and (<= (+ s (* 2 k)) (+ (* 2 t) j)) (<= (+ (* 2 t) j) (+ s (* 2 k))))) (<= q2-back q2-front) (<= q2-front q2-back)) (<= q1-back q1-front))
(not f)
(not g)
(not (<= (+ N (- i)) 0))
(or (<= k (- 1)) f)
(or (and (<= s (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t))) (<= (+ (* 2 (+ (q2 q2-front) 1)) (* 2 t)) s)) f)
(or (and (= 2 (q1 q1-front)) (<= s (* 2 t)) (<= (* 2 t) s) (<= q1-back (+ q1-front 1)) (<= q2-back q2-front) (<= q2-front q2-back)) (<= q1-back q1-front))
(or (and (= 2 (q1 q1-front)) (= (+ j (- 2)) 0) (and (= (+ j (- k) (- 1)) 0) (and (<= (+ s (* 2 k)) (+ (* 2 t) j)) (<= (+ (* 2 t) j) (+ s (* 2 k))))) (<= q1-back (+ q1-front 1)) (<= q2-back q2-front) (<= q2-front q2-back)) (<= q1-back q1-front))
(or (and (not (<= (+ s (* (- 2) t) (- 1)) 0)) (<= s (+ (* 2 t) 2))) f)
(or (not g) f)
)

(assume (and
  (= i s t 0)
  (= f g true)
  (= q1-front q1-back)
  (= q2-front q2-back)
  (>= N 0)))

(par
  (seq
    (while (< i N)
      (atomic
        (assume (= (q1 q1-back) 2))
        (set! q1-back (+ q1-back 1)))
      (set! i (+ i 1)))
    (atomic
      (assume (= (q1 q1-back) 0))
      (set! q1-back (+ q1-back 1))))

  (while f
    (atomic
      (assume (> q1-back q1-front))
      (set! j (q1 q1-front))
      (set! q1-front (+ q1-front 1)))
    (atomic
      (assume (= (q2 q2-back) (- j 1)))
      (set! q2-back (+ q2-back 1)))
    (set! s (+ s j))
    (set! f (> j 0)))

  (while g
    (atomic
      (assume (> q2-back q2-front))
      (set! k (q2 q2-front))
      (set! q2-front (+ q2-front 1)))
    (set! t (+ t k))
    (set! g (> k 0))))

(assume (not (= s (* 2 (+ t 1)))))
