; -m partition-progress -b 1
(var i1 i2 N1 N2 counter Int)
(use
false
true
(<= i1 0)
(and (<= counter 0) (<= i1 counter))
(and (<= i1 counter) (<= counter i1))
(and (<= i1 counter) (<= 0 (+ i1 (+ (* (- 1) counter) (* (- 1) i2)))))
(and (<= i1 counter) (<= (+ counter i2) 0))
(and (<= i1 counter) (<= (+ counter (+ i2 (* (- 1) N1))) 0))
(and (<= i1 0) (<= counter i1))
(and (<= i1 0) (<= 0 i1))
(and (<= 0 (+ N1 (+ (* (- 1) i2) (* (- 1) counter)))) (<= 0 (+ i2 (+ counter (* (- 1) i1)))))
(and (<= 0 (+ N1 (+ (* (- 1) i2) (* (- 1) counter)))) (<= (+ N1 (+ (* (- 1) N2) (* (- 1) counter))) (- 1)))
(and (<= 0 (+ N1 (+ (* (- 1) i2) (* (- 1) counter)))) (<= (+ N1 (+ (* (- 1) i2) (* (- 1) counter))) 0))
(and (<= 0 (+ N2 (+ counter (* (- 1) i1)))) (<= 0 (+ N1 (+ (* (- 1) i2) (* (- 1) counter)))))
(and (<= 0 (+ N2 (+ counter (* (- 1) i1)))) (<= 1 (+ N1 (+ (* (- 1) i2) (* (- 1) counter)))))
(and (<= 0 (+ N2 (+ counter (* (- 1) i1)))) (<= (+ i2 (+ counter (* (- 1) i1))) 0))
(and (<= 0 (+ N2 (+ counter (* (- 1) i1)))) (<= (+ i2 (+ (* (- 1) N1) counter)) 0))
(and (<= 0 (+ N2 (+ (* (- 1) i1) counter))) (<= 0 (+ i1 (+ (* (- 1) counter) (* (- 1) i2)))))
(and (<= 0 (+ N2 (+ (* (- 1) i1) counter))) (<= 1 (+ N1 (+ (* (- 1) counter) (* (- 1) i2)))))
(and (<= 0 (+ counter (+ (* (- 1) N1) N2))) (<= (+ counter (+ i2 (* (- 1) N1))) 0))
(and (<= 0 (+ i1 (+ (* (- 1) counter) (* (- 1) i2)))) (<= i1 i2))
(and (<= 0 (+ i1 (+ (* (- 1) counter) (* (- 1) i2)))) (<= (+ i1 (+ (* (- 1) counter) (* (- 1) i2))) 0))
(and (<= 0 (+ i2 (+ counter (* (- 1) i1)))) (<= (+ i2 (+ counter (* (- 1) i1))) 0))
(and (<= 0 (+ i2 (+ counter (* (- 1) i1)))) (<= (+ i2 (+ (* (- 1) N1) counter)) (- 1)))
(and (<= 1 (+ N1 (+ (* (- 1) i2) (* (- 1) counter)))) (<= 0 (+ i2 (+ counter (* (- 1) i1)))))
(and (<= (+ N1 (+ (* (- 1) N2) (* (- 1) counter))) 0) (<= 0 (+ N1 (+ (* (- 1) N2) (* (- 1) counter)))))
(and (<= (+ N1 (+ (* (- 1) N2) (* (- 1) counter))) 0) (<= 0 (+ N1 (+ (* (- 1) counter) (* (- 1) i2)))))
(and (<= (+ N1 (+ (* (- 1) N2) (* (- 1) counter))) 0) (<= 0 (+ N1 (+ (* (- 1) i2) (* (- 1) counter)))))
(and (<= (+ N1 (+ (* (- 1) N2) (* (- 1) counter))) 0) (<= (+ i2 (+ (* (- 1) N1) counter)) 0))
(and (<= (+ counter (+ i2 (* (- 1) N1))) 0) (<= (+ i1 (+ (* (- 1) counter) (* (- 1) N2))) 0))
(and (<= (+ counter (+ i2 (* (- 1) N1))) (- 1)) (<= i1 i2))
(and (<= (+ counter (+ (* (- 1) N1) N2)) 0) (<= 0 (+ counter (+ (* (- 1) N1) N2))))
(and (<= (+ i1 (+ (* (- 1) counter) (* (- 1) N2))) 0) (<= 0 (+ i1 (+ (* (- 1) counter) (* (- 1) i2)))))
(and (<= (+ i1 (+ (* (- 1) counter) (* (- 1) N2))) 0) (<= (+ counter (+ i2 (* (- 1) N1))) (- 1)))
(and (<= (+ i2 (+ counter (* (- 1) i1))) 0) (<= i1 N2))
(and (<= (+ i2 (+ counter (* (- 1) i1))) 0) (<= 0 (+ i2 (+ counter (* (- 1) i1)))))
(and (<= (+ i2 (+ counter (* (- 1) i1))) 0) (<= 1 (+ N2 (+ counter (* (- 1) i1)))))
(and (<= (+ i2 (+ (* (- 1) N1) counter)) 0) (<= N1 N2))
(and (<= (+ i2 (+ (* (- 1) N1) counter)) 0) (<= (- 1) (+ i2 (* (- 1) N1))))
(and (<= (+ i2 (+ (* (- 1) N1) counter)) 0) (<= (- 1) (+ i2 (* (- 1) i1))))
(and (<= (+ i2 (+ (* (- 1) N1) counter)) (- 1)) (<= i1 N2))
(and (<= (+ i2 (+ (* (- 1) N1) counter)) (- 1)) (<= 1 (+ N2 (+ counter (* (- 1) i1)))))
(and (<= (- 1) (+ i2 (* (- 1) i1))) (<= (+ i2 (+ counter (* (- 1) i1))) 0))
(and (<= (- 1) (+ i2 (* (- 1) i1))) (<= (+ i2 (+ (* (- 1) N1) counter)) (- 1)))
)

(assume (= i1 0))
(assume (= counter 0))
(assume (= i2 0))
(assume (<= 0 N1))
(assume (<= 0 N2))

(par
  (while (< i1 N1)
    (atomic
      (set! counter (+ counter 1))
      (set! i1 (+ i1 1))))
  (while (< i2 N2)
    (atomic
      (assume (< 0 counter))
      (set! counter (- counter 1))
      (set! i2 (+ i2 1)))))

(assume (not (= counter (- N1 N2))))
