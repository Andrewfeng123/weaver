; -m total-progress-context-opt -b rr
(var queue (Int) Int)
(var front back Int)
(var d w W temp Int)
(var assert Bool)
(use
assert
false
true
(<= back front)
(<= d W)
(<= front back)
(<= w W)
(<= w 0)
(<= 0 W)
(<= 0 (+ W (+ (* (- 1) d) (* (- 1) temp))))
(<= 0 (+ W (+ (* (- 1) d) (* (- 1) (queue front)))))
(<= 0 (+ W (+ (* (- 1) w) (* (- 1) d))))
(<= (+ front (* (- 1) back)) (- 1))
(<= (- 1) (+ front (* (- 1) back)))
(and assert (<= d W))
(and assert (<= 0 (+ W (+ (* (- 1) d) (* (- 1) temp)))))
(and assert (<= 0 (+ W (+ (* (- 1) d) (* (- 1) w)))))
(and assert (<= 0 (+ W (+ (* (- 1) d) (* (- 1) (queue front))))))
(and assert (<= 0 (+ W (+ (* (- 1) d) (+ (* (- 1) temp) (* (- 1) w))))))
(and assert (<= 0 (+ W (+ (* (- 1) w) (* (- 1) d)))))
(and assert (<= 1 (+ W (* (- 1) d))))
(and assert (<= 1 (+ W (+ (* (- 1) d) (* (- 1) w)))))
(and assert (<= (- 1) (+ W (+ (* (- 1) d) (+ (* (- 1) w) (* (- 1) temp))))))
(and assert (<= (- 1) (+ W (+ (* (- 1) d) (+ (* (- 1) (queue front)) (* (- 1) w))))))
(and assert (<= (- 1) (+ W (+ (* (- 1) w) (+ (* (- 1) d) (* (- 1) temp))))))
(and assert (<= (- 1) (+ W (+ (* (- 1) w) (+ (* (- 1) d) (* (- 1) (queue front)))))))
(and assert (and (<= 0 (+ W (+ (* (- 1) d) (* (- 1) w)))) (= front back)))
(and assert (and (<= 0 (+ W (+ (* (- 1) d) (+ (* (- 1) temp) (* (- 1) w))))) (= front back)))
(and assert (and (<= 1 (+ W (* (- 1) d))) (= front back)))
(and assert (and (<= (- 1) (+ W (+ (* (- 1) w) (+ (* (- 1) d) (* (- 1) temp))))) (= front back)))
(and assert (and (= front back) (<= 0 (+ W (+ (* (- 1) w) (* (- 1) d))))))
(and assert (and (= front back) (<= 1 (+ W (* (- 1) d)))))
(and (<= back front) (and assert (and (= front back) (<= 0 (+ W (+ (* (- 1) w) (* (- 1) d)))))))
(and (<= back front) (and (= front back) (<= 0 (+ W (+ (* (- 1) w) (* (- 1) d))))))
(and (<= 0 (+ W (+ (* (- 1) d) (* (- 1) w)))) (= front back))
(and (<= 0 (+ W (+ (* (- 1) d) (+ (* (- 1) temp) (* (- 1) w))))) (= front back))
(and (<= 1 (+ W (* (- 1) d))) (<= 0 (+ W (+ (* (- 1) d) (* (- 1) temp)))))
(and (<= 1 (+ W (* (- 1) d))) (<= 0 (+ W (+ (* (- 1) d) (* (- 1) (queue front))))))
(and (<= 1 (+ W (* (- 1) d))) (= front back))
(and (<= (- 1) (+ W (+ (* (- 1) w) (+ (* (- 1) d) (* (- 1) temp))))) (= front back))
(and (<= (- 1) (+ front (* (- 1) back))) (<= (- 1) (+ W (+ (* (- 1) w) (+ (* (- 1) d) (* (- 1) (queue front)))))))
(and (<= (- 1) (+ front (* (- 1) back))) (and assert (<= (- 1) (+ W (+ (* (- 1) w) (+ (* (- 1) d) (* (- 1) (queue front))))))))
(and (= front back) (<= 0 (+ W (+ (* (- 1) w) (* (- 1) d)))))
(and (= front back) (<= 1 (+ W (* (- 1) d))))
(and (not (and (not assert) (<= d W))) (not (and assert (not (<= d W)))))
(and (not (and (not assert) (<= d W))) (not (and assert (not (<= d W)))))
(and (not (and (<= d W) (not assert))) (not (and (not (<= d W)) assert)))
)

(assume (>= W 0))
(assume (= w W))
(assume (= d 0))
(assume assert)
(assume (= front back))

(par
  (while (and assert (< 0 w))
    (atomic
      (assume (= (queue back) 1))
      (set! back (+ back 1)))
    (set! w (- w 1)))
  (while assert
    (atomic
      (assume (< front back))
      (set! temp (queue front))
      (set! front (+ front 1)))
    (set! d (+ d temp)))
  (set! assert (<= d W)))

(assume (not assert))
