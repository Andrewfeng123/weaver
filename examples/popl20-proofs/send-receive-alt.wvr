(var queue (Int) Int)
(var front back Int)
(var sum Int)
(var b Bool)
(use
b
false
true
(<= front (+ back (- 1)))
(= back front)
(= (+ back (- front)) 0)
(= (+ front (- back)) 0)
(and (<= sum 0) (<= 0 sum))
(and (<= sum 0) (<= 0 sum) (= back front))
(and (<= sum 0) (<= 0 sum) (= 1 (queue front)))
(and (<= sum 1) (<= 0 (+ sum (- 1))))
(and (<= 0 sum) (<= front (+ back (- 1))) (<= back (+ front 1)) (<= sum 0) (= 1 (queue front)))
(and (<= 0 sum) (<= sum 0))
(and (<= 0 sum) (<= sum 0) (<= back (+ front 1)) (<= front (+ back (- 1))) (= 1 (queue front)))
(and (<= 0 sum) (<= sum 0) (<= front (+ back (- 1))) (= 1 (queue front)) (<= back (+ front 1)))
(and (<= 0 sum) (<= sum 0) (= back front))
(and (<= 0 sum) (= 1 (queue front)) (<= sum 0))
(and (<= 0 sum) (=> (not (= back front)) false) (<= sum 0))
(and (<= 0 (+ sum (- 1))) (<= front (+ back (- 1))) (<= back (+ front 1)) (<= sum 1) (= (- 1) (queue front)))
(and (<= 0 (+ sum (- 1))) (<= sum 1))
(and (<= 0 (+ sum (- 1))) (<= sum 1) (= (- 1) (queue front)))
(and (<= 0 (+ sum (- 1))) (<= sum 1) (and (not (<= (+ back (- front) 1) 0)) (<= back front)))
(and (= (+ back (- front)) 0) (<= 0 (+ sum (- 1))) (<= sum 1))
(and (= (- 1) (queue front)) (<= 0 (+ sum (- 1))) (<= sum 1))
(and (and (<= 0 sum) (<= sum 0)) (= back front))
(and (and (= (- 1) (queue (+ front 1))) (<= 0 sum) (<= sum 0)) (= 1 (queue front)))
(not b)
)

(assume (= front back))
(assume (= sum 0))
(assume b)

(par
  (loop
    (atomic
      (assume (> back front))
      (set! sum (+ sum (queue front)))
      (set! front (+ front 1))))
  (loop
    (if b
      (atomic
        (assume (= (queue back) 1))
        (set! back (+ back 1)))
      (atomic
        (assume (= (queue back) (- 1)))
        (set! back (+ back 1))))
    (set! b (not b))))

(assume (not (and (<= 0 sum) (<= sum 1))))
