; -m total-progress-context-opt -b rr
(var j1 j2 M1 M2 counter Int)
(use
false
true
(<= counter 0)
(<= j2 j1)
(<= j2 0)
(<= 0 counter)
(<= 0 j1)
(<= 0 (+ M2 (+ (* (- 1) M1) (+ j1 (* (- 1) j2)))))
(<= 1 counter)
(<= 1 (+ M2 (* (- 1) j2)))
(<= (+ j2 (* (- 1) M2)) (- 1))
(= counter 0)
(and (<= counter 0) (<= 0 counter))
(and (<= counter 0) (<= (+ j2 (* (- 1) M2)) (- 1)))
(and (<= counter 0) (and (<= 0 counter) (<= j2 j1)))
(and (<= counter 0) (and (<= 0 counter) (<= 0 (+ M2 (+ (* (- 1) M1) (+ j1 (* (- 1) j2)))))))
(and (<= counter 0) (and (<= 0 counter) (<= 0 (+ j1 (+ (* (- 1) j2) (+ M2 (* (- 1) M1)))))))
(and (<= 0 counter) (<= j2 j1))
(and (<= 0 counter) (<= 0 (+ M2 (+ (* (- 1) M1) (+ j1 (* (- 1) j2))))))
(and (<= 0 counter) (<= 0 (+ j1 (+ M2 (+ (* (- 1) M1) (* (- 1) j2))))))
(and (<= 0 counter) (<= 0 (+ j1 (+ (* (- 1) j2) (+ M2 (* (- 1) M1))))))
(and (<= 1 counter) (<= counter 1))
(and (<= 1 counter) (<= 1 (+ M2 (+ (* (- 1) M1) (+ j1 (* (- 1) j2))))))
(and (<= 1 counter) (<= 2 (+ M2 (* (- 1) j2))))
(and (<= 1 counter) (<= (+ j2 (+ (* (- 1) M2) (+ M1 (* (- 1) j1)))) (- 1)))
(and (<= 0 counter) (and (<= counter 0) (and (<= 0 counter) (<= 0 (+ j1 (+ M2 (+ (* (- 1) M1) (* (- 1) j2))))))))
(and (<= 1 counter) (and (<= counter 1) (and (<= 1 counter) (<= 1 (+ M2 (+ (* (- 1) M1) (+ j1 (* (- 1) j2))))))))
(and (<= counter 0) (and (<= 0 counter) (and (<= counter 0) (and (<= 0 counter) (<= j2 j1)))))
(and (<= counter 0) (and (<= 0 counter) (and (<= counter 0) (and (<= 0 counter) (<= 0 (+ j1 (+ (* (- 1) j2) (+ M2 (* (- 1) M1)))))))))
)

(assume (= j1 0))
(assume (= j2 0))
(assume (= counter 0))
(assume (= M2 M1))
(assume (< 0 M2))

(par
  (while (< j1 M1)
    (atomic
      (set! counter (+ counter 1))
      (set! j1 (+ j1 1))))
  (while (< j2 M2)
    (atomic
      (set! j2 (if (< 0 counter) (+ j2 1) j2))
      (set! counter (if (< 0 counter) (- counter 1) counter)))))

(assume (not (= counter 0)))
