; -m partition-progress-context -b rr
(var queue1 (Int) Int)
(var front1 back1 Int)
(var queue2 (Int) Int)
(var front2 back2 Int)
(var d1 d2 w W temp1 temp2 Int)
(var assert Bool)
(use
assert
false
true
(<= back1 front1)
(<= back2 front2)
(<= front1 back1)
(<= front2 back2)
(<= w W)
(<= 0 W)
(<= 0 (+ (* 2 W) (* (- 1) d2)))
(<= 0 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp2))))
(<= 0 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) (queue2 front2)))))
(<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2))))
(<= (+ front1 (* (- 1) back1)) (- 1))
(<= (+ front2 (* (- 1) back2)) (- 1))
(<= (- 1) (+ front1 (* (- 1) back1)))
(<= (- 1) (+ front2 (* (- 1) back2)))
(and assert (<= 0 (+ (* 2 W) (* (- 1) d2))))
(and assert (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp2)))))
(and assert (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) (queue2 front2))))))
(and assert (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (* (- 2) w)))))
(and assert (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) temp2) (* (- 2) w))))))
(and assert (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) (queue2 front2)) (* (- 2) w))))))
(and assert (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))))
(and assert (<= 2 (+ (* 2 W) (* (- 1) d2))))
(and assert (<= 2 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp2)))))
(and assert (<= 2 (+ (* 2 W) (+ (* (- 1) d2) (* (- 2) w)))))
(and assert (<= 4 (+ (* 2 W) (* (- 1) d2))))
(and assert (and (<= back1 front1) (and (<= back2 front2) (and (= front2 back2) (and (= front1 back1) (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))))))))
(and assert (and (<= back1 front1) (and (= front1 back1) (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))))))
(and assert (and (<= back2 front2) (and (= front2 back2) (and (and (= front1 back1) (= temp1 1)) (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 2) temp1) (* (- 2) w)))))))))
(and assert (and (<= back2 front2) (and (= front2 back2) (and (and (= front1 back1) (= temp1 1)) (<= (- 2) (+ (* 2 W) (+ (* (- 2) w) (+ (* (- 1) d2) (* (- 2) temp1)))))))))
(and assert (and (<= (- 1) (+ front2 (* (- 1) back2))) (and (and (= front1 back1) (= temp1 1)) (<= (- 1) (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) (queue2 front2)) (+ (* (- 1) temp1) (* (- 2) w)))))))))
(and assert (and (= front1 back1) (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2))))))
(and assert (and (= front2 back2) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp1))))))
(and assert (and (= front2 back2) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) (queue1 front1)))))))
(and assert (and (= front2 back2) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) temp1) (* (- 2) w)))))))
(and assert (and (= front2 back2) (<= (- 1) (+ (* 2 W) (+ (* (- 2) w) (+ (* (- 1) d2) (* (- 1) temp1)))))))
(and assert (and (= front2 back2) (<= (- 1) (+ (* 2 W) (+ (* (- 2) w) (+ (* (- 1) d2) (* (- 1) (queue1 front1))))))))
(and assert (and (= front2 back2) (and (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (* (- 2) w)))) (= front1 back1))))
(and assert (and (= front2 back2) (and (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (* (- 2) w)))) (= (queue1 front1) 1))))
(and assert (and (= front2 back2) (and (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) temp2) (* (- 2) w))))) (= front1 back1))))
(and assert (and (= front2 back2) (and (<= 2 (+ (* 2 W) (* (- 1) d2))) (= front1 back1))))
(and assert (and (= front2 back2) (and (<= 2 (+ (* 2 W) (* (- 1) d2))) (= (queue1 front1) 1))))
(and assert (and (= front2 back2) (and (<= 2 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp2)))) (= front1 back1))))
(and assert (and (= front2 back2) (and (= front1 back1) (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))))))
(and assert (and (= front2 back2) (and (= front1 back1) (<= 2 (+ (* 2 W) (* (- 1) d2))))))
(and assert (and (= front2 back2) (and (= (queue1 front1) 1) (<= 2 (+ (* 2 W) (+ (* (- 1) d2) (* (- 2) w)))))))
(and assert (and (= front2 back2) (and (and (= front1 back1) (= temp1 1)) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) temp2) (* (- 1) temp1))))))))
(and assert (and (= front2 back2) (and (and (= front1 back1) (= temp1 1)) (<= (- 1) (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) temp2) (+ (* (- 1) temp1) (* (- 2) w)))))))))
(and (<= back1 front1) (and (= front1 back1) (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2))))))
(and (<= back2 front2) (and (and (= front1 back1) (= temp1 1)) (and (= front2 back2) (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 2) temp1) (* (- 2) w))))))))
(and (<= back2 front2) (and (and (= front1 back1) (= temp1 1)) (and (= front2 back2) (<= (- 2) (+ (* 2 W) (+ (* (- 2) w) (+ (* (- 1) d2) (* (- 2) temp1))))))))
(and (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) temp2) (* (- 2) w))))) (<= 2 (+ (* 2 W) (+ (* (- 1) d2) (* (- 2) w)))))
(and (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) (queue2 front2)) (* (- 2) w))))) (<= 2 (+ (* 2 W) (+ (* (- 1) d2) (* (- 2) w)))))
(and (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))) (and (= front2 back2) (<= (- 1) (+ (* 2 W) (+ (* (- 2) w) (+ (* (- 1) d2) (* (- 1) temp1)))))))
(and (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))) (and (= front2 back2) (<= (- 1) (+ (* 2 W) (+ (* (- 2) w) (+ (* (- 1) d2) (* (- 1) (queue1 front1))))))))
(and (<= 2 (+ (* 2 W) (* (- 1) d2))) (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp2)))))
(and (<= 2 (+ (* 2 W) (* (- 1) d2))) (<= 0 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) (queue2 front2))))))
(and (<= 2 (+ (* 2 W) (* (- 1) d2))) (and (= front2 back2) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp1))))))
(and (<= 2 (+ (* 2 W) (* (- 1) d2))) (and (= front2 back2) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) (queue1 front1)))))))
(and (<= 4 (+ (* 2 W) (* (- 1) d2))) (<= 2 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp2)))))
(and (<= (- 1) (+ front2 (* (- 1) back2))) (and (and (= front1 back1) (= temp1 1)) (<= (- 1) (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) (queue2 front2)) (+ (* (- 1) temp1) (* (- 2) w))))))))
(and (= front1 back1) (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))))
(and (= front1 back1) (and (<= 2 (+ (* 2 W) (* (- 1) d2))) (= front2 back2)))
(and (= front1 back1) (and (<= 2 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp2)))) (= front2 back2)))
(and (= front2 back2) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) temp1)))))
(and (= front2 back2) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (* (- 1) (queue1 front1))))))
(and (= front2 back2) (and (= front1 back1) (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2))))))
(and (= front2 back2) (and (= front1 back1) (<= 2 (+ (* 2 W) (* (- 1) d2)))))
(and (= (queue1 front1) 1) (and (<= 2 (+ (* 2 W) (* (- 1) d2))) (= front2 back2)))
(and (and (= front1 back1) (= temp1 1)) (and (= front2 back2) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) temp2) (* (- 1) temp1)))))))
(and (and (= front1 back1) (= temp1 1)) (and (= front2 back2) (<= (- 1) (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) temp2) (+ (* (- 1) temp1) (* (- 2) w))))))))
(and (and (= front2 back2) (<= 1 (+ (* 2 W) (+ (* (- 1) d2) (+ (* (- 1) temp1) (* (- 2) w)))))) (<= 2 (+ (* 2 W) (+ (* (- 1) d2) (* (- 2) w)))))
(and (not assert) (not (<= 0 (+ (* 2 W) (* (- 1) d2)))))
(and (not (and (not assert) (<= 0 (+ (* 2 W) (* (- 1) d2))))) (not (and assert (not (<= 0 (+ (* 2 W) (* (- 1) d2)))))))
(and (<= back1 front1) (and (<= back2 front2) (and (= front1 back1) (and (= front2 back2) (and (= front1 back1) (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))))))))
(and (<= 2 (+ (* 2 W) (* (- 1) d2))) (and (= front2 back2) (and (= front1 back1) (<= 2 (+ (* 2 W) (* (- 1) d2))))))
(and assert (and (<= (- 1) (+ front1 (* (- 1) back1))) (and (<= back2 front2) (and (= front2 back2) (and (= (queue1 front1) 1) (<= (- 2) (+ (* 2 W) (+ (* (- 2) w) (+ (* (- 1) d2) (* (- 2) (queue1 front1)))))))))))
(and (<= (- 1) (+ front1 (* (- 1) back1))) (and (<= back2 front2) (and (= (queue1 front1) 1) (and (= front2 back2) (<= (- 2) (+ (* 2 W) (+ (* (- 2) w) (+ (* (- 1) d2) (* (- 2) (queue1 front1))))))))))
(and (not (and (not assert) (<= 0 (+ (* 2 W) (* (- 1) d2))))) (not (and assert (not (<= 0 (+ (* 2 W) (* (- 1) d2)))))))
(and (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))) (and (= front2 back2) (and (= front1 back1) (<= 0 (+ (* 2 W) (+ (* (- 2) w) (* (- 1) d2)))))))
(not (and (not assert) (<= 0 (+ (* 2 W) (* (- 1) d2)))))
)

(assume (>= W 0))
(assume (= w W))
(assume (= d1 d2 0))
(assume assert)
(assume (= front1 back1))
(assume (= front2 back2))

(par
  (while (and assert (< 0 w))
    (atomic
      (assume (= (queue1 back1) 1))
      (set! back1 (+ back1 1)))
    (set! w (- w 1)))
  (while assert
    (atomic
      (assume (< front1 back1))
      (set! temp1 (queue1 front1))
      (set! front1 (+ front1 1)))
    (atomic
      (assume (= (queue2 back2) (+ temp1 1)))
      (set! back2 (+ back2 1)))
    (set! d1 (+ d1 temp1)))
  (while assert
    (atomic
      (assume (< front2 back2))
      (set! temp2 (queue2 front2))
      (set! front2 (+ front2 1)))
    (set! d2 (+ d2 temp2)))
  (set! assert (<= d2 (* 2 W))))

(assume (not assert))
