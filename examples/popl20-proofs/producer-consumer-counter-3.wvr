(var queue1 (Int) Int)
(var front1 back1 Int)
(var queue2 (Int) Int)
(var front2 back2 Int)
(var d1 d2 w W temp1 temp2 Int)
(var assert Bool)
(use
assert
false
true
(<= back1 front1)
(<= back1 (+ front1 1))
(<= back2 front2)
(<= back2 (+ front2 1))
(<= d2 (* 2 W))
(<= d2 (+ (* 2 W) (- 2)))
(<= d2 (+ (* 2 W) (- 4)))
(<= front1 (+ back1 (- 1)))
(<= front2 (+ back2 (- 1)))
(<= w W)
(<= 0 W)
(<= (+ d2 temp2) (* 2 W))
(<= (+ d2 temp2) (+ (* 2 W) (- 2)))
(<= (+ d2 temp2) (+ (* 2 W) (- 4)))
(<= (+ d2 temp2 (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 1)))
(<= (+ d2 (* 2 w)) (* 2 W))
(<= (+ d2 (* 2 w) (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 3)))
(<= (+ d2 (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 1)))
(<= (+ d2 (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 3)))
(<= (+ d2 (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 5)))
(<= (+ d2 (+ (queue2 front2) (- 1)) temp2) (+ (* 2 W) (- 1)))
(<= (+ d2 (+ (queue2 front2) (- 1)) (* 2 w)) (+ (* 2 W) (- 1)))
(<= (+ (* 2 W) (- d2) 1) 0)
(<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 3)))
(<= (+ (+ (queue2 front2) (- 1)) d2 (+ (queue2 (+ front2 1)) (- 1))) (+ (* 2 W) (- 2)))
(= (+ back1 (- front1)) 0)
(= (+ back2 (- front2)) 0)
(= (+ front1 (- back1)) 0)
(= (+ front2 (- back2)) 0)
(=> (not assert) false)
(=> (not assert) (<= (+ (* 2 W) (- d2) 1) 0))
(=> (not (<= (+ (* 2 W) (- d2) 1) 0)) assert)
(and assert (not (<= w 0)))
(and (<= back1 (+ front1 1)) (<= front1 (+ back1 (- 1))) (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2) (= 1 (queue1 front1)))
(and (<= d2 (+ (* 2 W) (- 2))) (= back1 front1) (= back2 front2))
(and (<= d2 (+ (* 2 W) (- 2))) (= back2 front2) (= back1 front1))
(and (<= d2 (+ (* 2 W) (- 2))) (= back2 front2) (= 1 (queue1 front1)))
(and (<= d2 (+ (* 2 W) (- 2))) (= 1 (queue1 front1)) (= back2 front2))
(and (<= d2 (+ (* 2 W) (- 4))) (<= front1 (+ back1 (- 1))) (<= back1 (+ front1 1)) (= 1 (queue1 front1)) (= back2 front2))
(and (<= d2 (+ (* 2 W) (- 4))) (= back2 front2) (= 1 (queue1 front1)))
(and (<= d2 (+ (* 2 W) (- 4))) (= 1 (queue1 front1)) (= back2 front2))
(and (<= d2 (+ (* 2 W) (- 4))) (= 1 (queue1 (+ front1 1))) (= 1 (queue1 front1)) (= back2 front2))
(and (<= d2 (+ (* 2 W) (- 6))) (= back2 front2) (= 1 (queue1 front1)))
(and (<= d2 (+ (* 2 W) (- 6))) (= 1 (queue1 front1)) (= back2 front2))
(and (<= d2 (+ (* 2 W) (- 6))) (= 1 (queue1 (+ front1 1))) (= 1 (queue1 front1)) (= back2 front2))
(and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (<= (+ d2 (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 3))) (= 1 (queue1 front1)))
(and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 3))) (= 1 (queue1 front1)))
(and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 3))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)))
(and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)) (= (+ temp1 1) (queue2 front2)))
(and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (= (+ temp1 (- 1)) 0) (<= (+ d2 (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 3))))
(and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (= (+ temp1 (- 1)) 0) (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 3))))
(and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 4))) (= 1 (queue1 front1))) (= (+ temp1 1) (queue2 front2)))
(and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 4))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)) (= (+ temp1 1) (queue2 front2))))
(and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)) (= (+ temp1 1) (queue2 front2))))
(and (<= w W) (<= 0 W))
(and (<= (+ d2 temp2) (* 2 W)) (<= d2 (* 2 W)))
(and (<= (+ d2 temp2) (* 2 W)) (<= d2 (+ (* 2 W) temp2 (- 4))))
(and (<= (+ d2 temp2) (+ (* 2 W) (- 2))) (<= d2 (* 2 W)))
(and (<= (+ d2 temp2) (+ (* 2 W) (- 4))) (<= d2 (* 2 W)))
(and (<= (+ d2 temp2 (* 2 w)) (* 2 W)) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 temp2)) (* 2 W)) (<= d2 (+ (* 2 W) (- 4))))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (<= d2 (* 2 W)) (= back1 front1))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (<= d2 (* 2 W)) (= back1 front1) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (<= d2 (* 2 W)) (= back2 front2) (= back1 front1))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (<= d2 (* 2 W)) (= back2 front2) (= 1 (queue1 front1)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (<= d2 (* 2 W)) (= 1 (queue1 front1)) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (<= front1 (+ back1 (- 1))) (<= back1 (+ front1 1)) (= back2 front2) (= 1 (queue1 front1)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (<= front1 (+ back1 (- 1))) (<= back1 (+ front1 1)) (= 1 (queue1 front1)) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back1 front1))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back1 front1) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back1 front1) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back1 front1) (= back2 front2) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2) (<= d2 (* 2 W)) (= back1 front1))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2) (<= d2 (* 2 W)) (= 1 (queue1 front1)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2) (= back1 front1))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2) (= back1 front1) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2) (= 1 (queue1 front1)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2) (= 1 (queue1 front1)) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= 1 (queue1 front1)) (<= front1 (+ back1 (- 1))) (<= back1 (+ front1 1)) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= 1 (queue1 front1)) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= 1 (queue1 front1)) (= back2 front2) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 w)) (* 2 W)) (= 1 (queue1 front1)) (= back2 front2) (<= front1 (+ back1 (- 1))) (<= back1 (+ front1 1)))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (<= d2 (* 2 W)) (= back2 front2) (= 1 (queue1 front1)))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (<= front1 (+ back1 (- 1))) (<= back1 (+ front1 1)) (= 1 (queue1 front1)) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= back2 front2) (= 1 (queue1 front1)))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= back2 front2) (= 1 (queue1 front1)) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= 1 (queue1 front1)) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= 1 (queue1 front1)) (= back2 front2) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= 1 (queue1 (+ front1 1))) (= 1 (queue1 front1)) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 4))) (<= d2 (* 2 W)) (= back2 front2) (= 1 (queue1 front1)))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 4))) (= back2 front2) (= 1 (queue1 front1)))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 4))) (= 1 (queue1 front1)) (= back2 front2))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 4))) (= 1 (queue1 front1)) (= back2 front2) (<= d2 (* 2 W)))
(and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 4))) (= 1 (queue1 (+ front1 1))) (= 1 (queue1 front1)) (= back2 front2))
(and (<= (+ d2 (* 2 w) (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 1))) (<= d2 (* 2 W)))
(and (<= (+ d2 (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 1))) (<= d2 (* 2 W)))
(and (<= (+ d2 (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 3))) (<= d2 (* 2 W)))
(and (<= (+ (* 2 (+ (queue2 front2) (- 1))) d2) (+ (* 2 W) (- 2))) (<= d2 (+ (* 2 W) (- 4))))
(and (<= (+ (* 2 (+ (queue2 front2) (- 1))) d2 temp2) (+ (* 2 W) (- 2))) (<= (+ d2 temp2) (+ (* 2 W) (- 4))))
(and (<= (+ (* 2 (+ (queue2 (+ front2 1)) (- 1))) (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 3))) (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 5))))
(and (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 3))) (<= d2 (* 2 W)))
(and (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 5))) (<= d2 (* 2 W)))
(and (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 1))) (<= d2 (* 2 W)))
(and (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 3))) (<= d2 (* 2 W)))
(and (= 1 (queue1 front1)) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 1))))
(and (= 1 (queue1 front1)) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 3))))
(and (= 1 (queue1 front1)) (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 1))) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)))
(and (= 1 (queue1 front1)) (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 3))) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)))
(and (= (+ back1 (- front1)) 0) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 1))))
(and (= (+ back2 (- front2)) 0) (<= d2 (+ (* 2 W) (- 2))) (= 1 (queue1 front1)))
(and (= (+ back2 (- front2)) 0) (<= d2 (+ (* 2 W) (- 2))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)))
(and (= (+ back2 (- front2)) 0) (<= d2 (+ (* 2 W) (- 4))) (= 1 (queue1 front1)))
(and (= (+ back2 (- front2)) 0) (<= (+ d2 temp2) (+ (* 2 W) (- 2))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)))
(and (= (+ back2 (- front2)) 0) (<= (+ d2 temp2) (+ (* 2 W) (- 4))) (= 1 (queue1 front1)))
(and (= (+ back2 (- front2)) 0) (= (+ temp1 (- temp2) 1) 0) (and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 4))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1))))
(and (= (+ back2 (- front2)) 0) (= (+ temp1 (- temp2) 1) 0) (and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1))))
(and (= (+ back2 (- front2)) 0) (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 2))))
(and (= (+ back2 (- front2)) 0) (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 4))))
(and (= (+ back2 (- front2)) 0) (ite (= back1 front1) (and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (* 2 W))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1))))
(and (= (+ back2 (- front2)) 0) (ite (= back1 front1) (and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2)))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1))))
(and (= (+ temp1 1) (queue2 front2)) (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 2))))
(and (= (+ temp1 1) (queue2 front2)) (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 4))))
(and (= (+ temp1 1) (queue2 front2)) (= (+ temp1 (- 1)) 0) (<= (+ d2 temp2) (+ (* 2 W) (- 2))))
(and (= (+ temp1 1) (queue2 front2)) (and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 4)))))
(and (= (+ temp1 1) (queue2 (+ front2 1))) (= (+ temp1 (- 1)) 0) (<= (+ d2 (+ (queue2 front2) (- 1))) (+ (* 2 W) (- 3))))
(and (= (+ temp1 1) (queue2 (+ front2 1))) (= (+ temp1 (- 1)) 0) (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 3))))
(and (= (+ temp1 (- temp2) 1) 0) (and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 2)))))
(and (= (+ temp1 (- temp2) 1) 0) (and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 4)))))
(and (= (+ temp1 (- temp2) 1) 0) (and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 6)))))
(and (= (+ temp1 (- temp2) 1) 0) (and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2)))))
(and (= (+ temp1 (- temp2) 1) 0) (and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2)))) (<= d2 (* 2 W)))
(and (= (+ temp1 (- temp2) 1) 0) (and (= (+ temp1 (- 1)) 0) (and (= (+ back2 (- front2)) 0) (<= d2 (+ (* 2 W) (- 6))) (= 1 (queue1 front1)))))
(and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 2))) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 2))) (= (+ temp1 1) (queue2 front2)))
(and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 4))) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 4))) (= (+ temp1 1) (queue2 front2)))
(and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 6))) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 6))) (= (+ temp1 1) (queue2 front2)))
(and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2) (<= d2 (* 2 W)))
(and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (* 2 W)) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= back2 front2) (<= d2 (* 2 W)))
(and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= (+ temp1 1) (queue2 front2)))
(and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= (+ temp1 1) (queue2 front2)) (<= d2 (* 2 W)))
(and (= (+ temp1 (- 1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (and (<= back2 (+ front2 1)) (<= front2 (+ back2 (- 1))) (<= d2 (+ (* 2 W) (- 6))) (= 1 (queue1 front1))) (= (+ temp1 1) (queue2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 2))) (= back2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 2))) (= (+ temp1 1) (queue2 front2))))
(and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 4))) (= back2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 4))) (= 1 (queue1 front1))) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 4))) (= (+ temp1 1) (queue2 front2))))
(and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 6))) (= back2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 6))) (= 1 (queue1 front1))) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 6))) (= 1 (queue1 front1))) (= (+ temp1 1) (queue2 front2)) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)))
(and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 6))) (= (+ temp1 1) (queue2 front2))))
(and (= (+ temp1 (- 1)) 0) (and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 5)))))
(and (= (+ temp1 (- 1)) 0) (and (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1)) (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 3)))))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (* 2 W)) (<= d2 (* 2 W))) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (* 2 W)) (= back2 front2) (<= d2 (* 2 W))))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (* 2 W)) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)) (= back2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (<= d2 (* 2 W))) (= back2 front2))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (<= d2 (* 2 W))) (= (+ temp1 1) (queue2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= back2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= back2 front2) (<= d2 (* 2 W))))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= (+ temp1 1) (queue2 front2))))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)) (= back2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 5))) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1))))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 5))) (= (+ temp1 1) (queue2 (+ front2 1)))))
(and (= (+ temp1 (- 1)) 0) (and (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 3))) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1))))
(and (= (+ temp1 (- 1)) 0) (and (= (+ temp1 1) (queue2 (+ front2 1))) (<= (+ (+ (queue2 front2) (- 1)) d2) (+ (* 2 W) (- 5)))))
(and (= (+ temp1 (- 1)) 0) (and (= (+ temp1 (- temp2) 1) 0) (<= d2 (+ (* 2 W) (- 2)))))
(and (= (+ temp1 (- 1)) 0) (and (= (+ temp1 (- temp2) 1) 0) (<= d2 (+ (* 2 W) (- 4)))))
(and (= (+ temp1 (- 1)) 0) (and (= (+ temp1 (- temp2) 1) 0) (<= d2 (+ (* 2 W) (- 6)))))
(and (= (+ temp1 (- 1)) 0) (and (= (+ temp1 (- temp2) 1) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2)))))
(and (= (+ temp1 (- 1)) 0) (and (and (= (+ back1 (- front1)) 0) (<= (+ d2 (* 2 w)) (* 2 W))) (= back2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (and (= (+ back1 (- front1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2)))) (= back2 front2)))
(and (= (+ temp1 (- 1)) 0) (and (and (= (+ back1 (- front1)) 0) (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1))) (= (+ temp1 1) (queue2 front2))))
(and (and (<= d2 (+ (* 2 W) (- 6))) (= 1 (queue1 (+ front1 1)))) (= 1 (queue1 front1)) (= back2 front2))
(and (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (= 1 (queue1 (+ front1 1)))) (= 1 (queue1 front1)) (= back2 front2))
(and (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 4))) (= 1 (queue1 (+ front1 1)))) (= 1 (queue1 front1)) (= back2 front2))
(and (not (<= w 0)) assert)
(and (not (<= (+ (* 2 W) (- d2) 1) 0)) assert)
(ite (= back1 front1) (and (<= (+ (+ (queue2 front2) (- 1)) d2 (* 2 w)) (+ (* 2 W) (- 1))) (<= front2 (+ back2 (- 1))) (<= back2 (+ front2 1))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)))
(ite (= back1 front1) (and (= (+ temp1 (- 1)) 0) (and (<= (+ d2 (* 2 w)) (+ (* 2 W) (- 2))) (<= front2 (+ back2 (- 1)))) (= (+ temp1 1) (queue2 front2)) (<= back2 (+ front2 1))) (and (<= (+ back1 (- front1)) 0) (<= front1 back1)))
(ite (= back2 front2) (and (<= d2 (+ (* 2 W) (- 4))) (= 1 (queue1 front1))) (and (<= (+ back2 (- front2)) 0) (<= front2 back2)))
(ite (= back2 front2) (and (<= (+ d2 temp2) (+ (* 2 W) (- 4))) (= 1 (queue1 front1))) (and (<= (+ back2 (- front2)) 0) (<= front2 back2)))
(ite (= back2 front2) (and (= (+ temp1 (- temp2) 1) 0) (and (= (+ temp1 (- 1)) 0) (and (<= d2 (+ (* 2 W) (- 6))) (= 1 (queue1 front1))))) (and (<= (+ back2 (- front2)) 0) (<= front2 back2)))
(ite (= back2 front2) (and (= (+ temp1 (- 1)) 0) (<= d2 (+ (* 2 W) (- 4)))) (and (<= (+ back2 (- front2)) 0) (<= front2 back2)))
(not assert)
)

(assume (>= W 0))
(assume (= w W))
(assume (= d1 d2 0))
(assume assert)
(assume (= front1 back1))
(assume (= front2 back2))

(par
  (while (and assert (< 0 w))
    (atomic
      (assume (= (queue1 back1) 1))
      (set! back1 (+ back1 1)))
    (set! w (- w 1)))
  (while assert
    (atomic
      (assume (< front1 back1))
      (set! temp1 (queue1 front1))
      (set! front1 (+ front1 1)))
    (atomic
      (assume (= (queue2 back2) (+ temp1 1)))
      (set! back2 (+ back2 1)))
    (set! d1 (+ d1 temp1)))
  (while assert
    (atomic
      (assume (< front2 back2))
      (set! temp2 (queue2 front2))
      (set! front2 (+ front2 1)))
    (set! d2 (+ d2 temp2)))
  (set! assert (<= d2 (* 2 W))))

(assume (not assert))
