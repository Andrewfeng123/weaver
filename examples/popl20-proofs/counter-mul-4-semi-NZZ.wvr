; -m total-progress-context-opt -b rr
(var i1 i2 N1 N2 counter Int)
(var j1 j2 M1 M2 Int)
(var C Int)
(use
false
true
(<= M1 j1)
(<= N1 i1)
(<= N2 i2)
(<= counter C)
(<= counter 0)
(<= i1 i2)
(<= i1 j1)
(<= i2 i1)
(<= i2 j1)
(<= j1 i1)
(<= j1 i2)
(<= j2 j1)
(<= 0 counter)
(<= 0 (+ N1 (+ (* (- 1) M1) (+ (* (- 1) i1) j1))))
(<= 0 (+ i1 (+ (* (- 1) i2) (+ (* (- 1) N1) N2))))
(<= 0 (+ i1 (+ (* (- 1) j1) (+ (* (- 1) N1) M1))))
(<= 0 (+ i2 (+ (* (- 1) j1) (+ (* (- 1) N2) M1))))
(<= 0 (+ j1 (+ (* (- 1) j2) (+ (* (- 1) M1) M2))))
(<= 1 C)
(<= 1 (+ M1 (* (- 1) j1)))
(<= 1 (+ M2 (* (- 1) j2)))
(<= 1 (+ N2 (* (- 1) i2)))
(<= (+ M1 (+ (* (- 1) M2) (+ (* (- 1) j1) j2))) 0)
(<= (+ N1 (+ (* (- 1) M1) (+ (* (- 1) i1) j1))) 0)
(<= (+ N1 (+ (* (- 1) N2) (+ (* (- 1) i1) i2))) 0)
(<= (+ i1 (+ (* (- 1) i2) (+ (* (- 1) N1) N2))) 0)
(<= (+ i1 (+ (* (- 1) j1) (+ (* (- 1) N1) M1))) 0)
(<= (+ i2 (* (- 1) N2)) (- 1))
(<= (+ i2 (* (- 1) N2)) (- 2))
(<= (+ i2 (+ N1 (+ (* (- 1) N2) (* (- 1) i1)))) (- 1))
(<= (+ i2 (+ (* (- 1) j1) (+ (* (- 1) N2) M1))) 0)
(<= (+ j1 (* (- 1) M1)) (- 1))
(<= (+ j1 (+ N1 (+ (* (- 1) M1) (* (- 1) i1)))) (- 1))
(<= (+ j2 (* (- 1) M2)) (- 1))
(<= (+ j2 (+ M1 (+ (* (- 1) M2) (* (- 1) j1)))) (- 1))
(<= (- 1) (+ i1 (+ (* (- 1) N1) (+ N2 (* (- 1) i2)))))
(<= (- 1) (+ j1 (+ N1 (+ (* (- 1) M1) (* (- 1) i1)))))
(= counter 0)
(and (<= counter C) (<= C counter))
(and (<= counter 0) (<= 0 counter))
(and (<= 1 C) (<= 1 counter))
(and (<= 1 C) (<= 1 (+ C counter)))
(and (<= 1 C) (<= 2 counter))
(and (<= 1 counter) (<= 1 C))
(and (<= 1 counter) (<= 2 (+ C counter)))
(and (<= 1 (+ C counter)) (<= 2 (+ (* 2 C) counter)))
(and (<= 1 (+ counter C)) (<= 1 C))
(and (<= 1 (+ counter C)) (<= 2 (+ counter (* 2 C))))
(and (<= 2 counter) (<= 3 (+ C counter)))
(and (<= 2 counter) (<= (+ C (* (- 1) counter)) (- 1)))
(and (<= 2 (+ C counter)) (<= 1 C))
(and (<= 2 (+ C counter)) (<= 3 (+ (* 2 C) counter)))
(and (<= 2 (+ counter (* 2 C))) (<= 1 C))
(and (<= 2 (+ counter (* 2 C))) (<= 3 (+ counter (* 3 C))))
)

(assume (= i1 i2 j1 j2 0))
(assume (= counter 0))
(assume (= N1 N2 M1 M2))
(assume (< 0 C))

(par
  (while (< i1 N1)
    (atomic
      (set! counter (+ counter C))
      (set! i1 (+ i1 1))))
  (while (< i2 N2)
    (atomic
      (assume (< 0 counter))
      (set! counter (- counter C))
      (set! i2 (+ i2 1))))
  (while (< j1 M1)
    (atomic
      (set! counter (+ counter C))
      (set! j1 (+ j1 1))))
  (while (< j2 M2)
    (atomic
      (assume (< 0 counter))
      (set! counter (- counter C))
      (set! j2 (+ j2 1)))))

(assume (not (= counter 0)))

