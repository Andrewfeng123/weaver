(var manager (Int) Int)
(var manager-front manager-back Int)
(var client (Int) Int)
(var client-front client-back Int)
(var node-1 (Int) Int)
(var node-1-front node-1-back Int)
(var node-2 (Int) Int)
(var node-2-front node-2-back Int)
(var update ok Int)
(var safe Bool)
(use
safe
false
true
(<= client-back client-front)
(<= client-back (+ client-front 1))
(<= manager-back manager-front)
(<= manager-back (+ manager-front 1))
(<= manager-back (+ manager-front 2))
(<= manager-back (+ manager-front (- 1)))
(<= manager-back (+ manager-front (- 2)))
(<= node-1-back node-1-front)
(<= node-1-back (+ node-1-front 1))
(<= node-2-back node-2-front)
(<= node-2-back (+ node-2-front 1))
(= (+ client-back (- client-front)) 0)
(= (+ client-front (- client-back)) 0)
(= (+ manager-back (- manager-front)) 0)
(= (+ manager-front (- manager-back)) 0)
(= (+ node-1-back (- node-1-front)) 0)
(= (+ node-1-front (- node-1-back)) 0)
(= (+ node-2-back (- node-2-front)) 0)
(= (+ node-2-front (- node-2-back)) 0)
(and safe (= client-back client-front))
(and safe (= manager-back manager-front) (= node-1-back node-1-front) (= node-2-back node-2-front) (= client-back client-front))
(and safe (= ok (client client-front)))
(and safe (and (= ok (manager manager-front)) (= client-back client-front)))
(and safe (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (<= manager-front manager-back) (<= manager-back manager-front) safe (= node-1-back node-1-front) (= node-2-back node-2-front) (= client-back client-front))
(and (<= manager-front manager-back) (<= manager-back manager-front) safe (= update (node-2 node-2-front)) (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (<= manager-front manager-back) (<= manager-back manager-front) (<= node-1-front (+ node-1-back (- 1))) (<= node-1-back (+ node-1-front 1)) safe (= update (node-1 node-1-front)) (= node-2-back node-2-front) (= client-back client-front))
(and (<= manager-front manager-back) (<= manager-back manager-front) (<= node-2-back (+ node-2-front 1)) (<= node-1-front (+ node-1-back (- 1))) (<= node-1-back (+ node-1-front 1)) safe (= update (node-1 node-1-front)) (= update (node-2 node-2-front)) (= client-back client-front))
(and (<= manager-front manager-back) (<= manager-back manager-front) (<= node-2-back (+ node-2-front 1)) (and (<= (+ node-1-back (- node-1-front)) 0) (<= node-1-front node-1-back)) safe (= update (node-2 node-2-front)) (= client-back client-front))
(and (<= manager-front manager-back) (<= manager-back manager-front) (= client-back client-front) safe (= node-1-back node-1-front) (= node-2-back node-2-front))
(and (<= manager-front manager-back) (<= manager-back manager-front) (= client-back client-front) safe (= update (node-1 node-1-front)) (= node-2-back node-2-front))
(and (<= manager-front manager-back) (<= manager-back manager-front) (= client-back client-front) safe (= update (node-1 node-1-front)) (= update (node-2 node-2-front)))
(and (<= manager-front manager-back) (<= manager-back manager-front) (= client-back client-front) safe (= update (node-2 node-2-front)))
(and (<= manager-front manager-back) (<= manager-back manager-front) (= update (node-2 node-2-front)) safe (= update (node-1 node-1-front)) (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (<= manager-front manager-back) (<= manager-back manager-front) (and (not (<= (+ node-2-back (- node-2-front) 1) 0)) (<= node-2-back node-2-front)) safe (= update (node-1 node-1-front)) (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (<= manager-front manager-back) (<= manager-back manager-front) (and (not (<= (+ node-2-back (- node-2-front) 1) 0)) (<= node-2-back node-2-front)) safe (and (<= (+ node-1-back (- node-1-front)) 0) (<= node-1-front node-1-back)) (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (<= manager-front manager-back) (<= manager-back manager-front) (and (not (<= (+ node-2-back (- node-2-front) 1) 0)) (<= node-2-back node-2-front)) (and (<= (+ node-1-back (- node-1-front)) 0) (<= node-1-front node-1-back)) safe (= client-back client-front))
(and (<= manager-front manager-back) (<= manager-back manager-front) (and (not (<= (+ node-2-back (- node-2-front) 1) 0)) (<= node-2-back node-2-front)) (and (<= (+ node-1-back (- node-1-front)) 0) (<= node-1-front node-1-back)) safe (= ok (client client-front)) (<= client-back (+ client-front 1)) (<= client-front (+ client-back (- 1))))
(and (<= manager-front manager-back) (<= manager-back manager-front) (and (not (<= (+ node-2-back (- node-2-front) 1) 0)) (<= node-2-back node-2-front)) (and (<= (+ node-1-back (- node-1-front)) 0) (<= node-1-front node-1-back)) safe (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (<= manager-front (+ manager-back (- 1))) (<= manager-back (+ manager-front 1)) safe (= ok (manager manager-front)) (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (<= manager-front (+ manager-back (- 1))) (<= manager-back (+ manager-front 1)) safe (= update (manager manager-front)) (= node-1-back node-1-front) (= node-2-back node-2-front) (= client-back client-front))
(and (<= manager-front (+ manager-back (- 1))) (<= manager-back (+ manager-front 1)) (<= node-2-back (+ node-2-front 1)) (and (<= (+ node-1-back (- node-1-front)) 0) (<= node-1-front node-1-back)) (= ok (manager manager-front)) safe (= update (node-2 node-2-front)) (= client-back client-front))
(and (<= manager-front (+ manager-back (- 1))) (<= manager-back (+ manager-front 1)) (= client-back client-front) safe (= update (manager manager-front)) (= node-1-back node-1-front) (= node-2-back node-2-front))
(and (<= manager-front (+ manager-back (- 1))) (<= manager-back (+ manager-front 1)) (= ok (manager manager-front)) safe (= update (node-2 node-2-front)) (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (<= manager-front (+ manager-back (- 1))) (<= manager-back (+ manager-front 1)) (and (not (<= (+ node-2-back (- node-2-front) 1) 0)) (<= node-2-back node-2-front)) (and (<= (+ node-1-back (- node-1-front)) 0) (<= node-1-front node-1-back)) safe (= ok (manager manager-front)) (= client-back client-front))
(and (<= manager-front (+ manager-back (- 1))) (<= manager-back (+ manager-front 1)) (and (not (<= (+ node-2-back (- node-2-front) 1) 0)) (<= node-2-back node-2-front)) (and (<= (+ node-1-back (- node-1-front)) 0) (<= node-1-front node-1-back)) safe (= update (manager manager-front)) (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (<= manager-front (+ manager-back (- 2))) (<= manager-back (+ manager-front 2)) (and (not (<= (+ node-2-back (- node-2-front) 1) 0)) (<= node-2-back node-2-front)) (and (<= (+ node-1-back (- node-1-front)) 0) (<= node-1-front node-1-back)) safe (= ok (manager manager-front)) (= ok (manager (+ manager-front 1))) (= client-back client-front))
(and (= client-back client-front) safe (= manager-back manager-front) (= node-1-back node-1-front) (= node-2-back node-2-front))
(and (= ok (manager manager-front)) safe (and (<= manager-front (+ manager-back (- 1))) (<= manager-back (+ manager-front 1)) (= client-back client-front)))
(and (= ok (manager manager-front)) safe (and (= ok (manager (+ manager-front 1))) (= client-back client-front)))
(and (= ok (manager manager-front)) safe (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
(and (= ok (manager manager-front)) (<= manager-front (+ manager-back (- 1))) (<= manager-back (+ manager-front 1)) (= client-back client-front) safe (= update (node-2 node-2-front)))
(and (= ok (manager (+ manager-front 1))) safe (= ok (manager manager-front)) (and (not (<= (+ client-back (- client-front) 1) 0)) (<= client-back client-front)))
)

(assume (and
  (= safe true)
  (= manager-front manager-back)
  (= client-front client-back)
  (= node-1-front node-1-back)
  (= node-2-front node-2-back)))

(par
  ; manager
  (loop
    (atomic
      (assume (> manager-back manager-front))
      (set! safe (and safe (= (manager manager-front) update)))
      (set! manager-front (+ manager-front 1)))
    (atomic
      (assume (= (node-1 node-1-back) update))
      (set! node-1-back (+ node-1-back 1)))
    (atomic
      (assume (= (node-2 node-2-back) update))
      (set! node-2-back (+ node-2-back 1)))
    (atomic
      (assume (> manager-back manager-front))
      (set! safe (and safe (= (manager manager-front) ok)))
      (set! manager-front (+ manager-front 1)))
    (atomic
      (assume (> manager-back manager-front))
      (set! safe (and safe (= (manager manager-front) ok)))
      (set! manager-front (+ manager-front 1)))
    (atomic
      (assume (= (client client-back) ok))
      (set! client-back (+ client-back 1))))

  ; node-1
  (loop
    (atomic
      (assume (> node-1-back node-1-front))
      (set! safe (and safe (= (node-1 node-1-front) update)))
      (set! node-1-front (+ node-1-front 1)))
    (atomic
      (assume (= (manager manager-back) ok))
      (set! manager-back (+ manager-back 1))))

  ; node-2
  (loop
    (atomic
      (assume (> node-2-back node-2-front))
      (set! safe (and safe (= (node-2 node-2-front) update)))
      (set! node-2-front (+ node-2-front 1)))
    (atomic
      (assume (= (manager manager-back) ok))
      (set! manager-back (+ manager-back 1))))

  ; client
  (loop
    (atomic
      (assume (= (manager manager-back) update))
      (set! manager-back (+ manager-back 1)))
    (atomic
      (assume (> client-back client-front))
      (set! safe (and safe (= (client client-front) ok)))
      (set! client-front (+ client-front 1)))))

(assume (not safe))
