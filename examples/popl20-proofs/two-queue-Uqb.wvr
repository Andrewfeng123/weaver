; -s yices-smtinterpol -m partition-progress-context --semi -b rr
(var q1 (Int) Int)
(var q1-front q1-back Int)
(var q2 (Int) Int)
(var q2-front q2-back Int)
(var i j N Int)
(use
false
true
(<= N j)
(<= i j)
(<= i (q2 q2-front))
(<= i (+ N (- 1)))
(<= i (+ N (- 2)))
(<= i (+ j 1))
(<= j (+ N (- 1)))
(<= j (+ N (- 2)))
(<= q1-back q1-front)
(<= q1-back (+ q1-front 1))
(<= q2-back q2-front)
(<= q2-back (+ q2-front 1))
(<= q2-front (+ q2-back (- 1)))
(<= (q1 q1-front) j)
(<= (q1 q1-front) (q2 q2-front))
(<= (q1 q1-front) (+ N (- 2)))
(<= (q1 q1-front) (+ j (- 1)))
(<= (q2 q2-front) i)
(<= (q2 q2-front) (q1 q1-front))
(<= (q2 q2-front) (+ N (- 2)))
(<= (q2 q2-front) (+ i (- 1)))
(<= (+ N (- i)) 0)
(<= (+ N (- j)) 0)
(<= (+ i (- N) 1) 0)
(<= (+ j (- N) 1) 0)
(= (+ j (- i)) 0)
(= (+ q1-back (- q1-front)) 0)
(= (+ q1-front (- q1-back)) 0)
(= (+ q2-back (- q2-front)) 0)
(and (<= i j) (= q2-back q2-front) (= q1-back q1-front))
(and (<= i (+ N (- 1))) (<= j (+ N (- 1))) (= q2-back q2-front) (= q1-back q1-front))
(and (<= i (+ N (- 1))) (= q2-back q2-front) (= q1-back q1-front))
(and (<= j N) (<= i (+ N (- 1))))
(and (<= j i) (= q1-back q1-front) (= q2-back q2-front))
(and (<= j i) (= q2-back q2-front) (= q1-back q1-front))
(and (<= j (q2 q2-front)) (= q1-back q1-front))
(and (<= j (+ N (- 1))) (<= i N))
(and (<= j (+ N (- 1))) (<= i (+ N (- 1))))
(and (<= j (+ N (- 1))) (<= (q1 q1-front) (+ N (- 1))))
(and (<= q2-front q2-back) (<= q2-back q2-front) (<= q1-back q1-front) (<= q1-front q1-back))
(and (<= q2-front (+ q2-back (- 1))) (<= q2-back (+ q2-front 1)) (<= q1-back q1-front) (<= q1-front q1-back))
(and (<= q2-front (+ q2-back (- 1))) (<= q2-back (+ q2-front 1)) (<= q1-back (+ q1-front 1)) (<= q1-front (+ q1-back (- 1))))
(and (<= (q2 q2-front) j) (= q1-back q1-front))
(and (<= (q2 q2-front) (+ N (- 1))) (<= i (+ N (- 1))))
(and (<= (q2 q2-front) (+ N (- 1))) (<= j (+ N (- 1))) (= q1-back q1-front))
(and (<= (q2 q2-front) (+ N (- 1))) (<= (q1 q1-front) (+ N (- 1))))
(and (<= (+ i (- j)) 0) (<= j i))
(and (= q2-back q2-front) (= q1-back q1-front))
(and (= (+ q1-back (- q1-front)) 0) (= (+ q2-back (- q2-front)) 0))
(and (= (+ q1-back (- q1-front)) 0) (and (<= q2-front (+ q2-back (- 1))) (<= q2-back (+ q2-front 1))))
(and (= (+ q2-back (- q2-front)) 0) (<= i (+ N (- 1))) (<= (q1 q1-front) (+ N (- 1))))
(and (= (+ q2-back (- q2-front)) 0) (<= j (+ N (- 1))) (<= q1-back (+ q1-front 1)) (<= q1-front (+ q1-back (- 1))))
(and (= (+ q2-back (- q2-front)) 0) (<= q1-back (+ q1-front 1)) (<= q1-front (+ q1-back (- 1))))
(and (= (+ q2-back (- q2-front)) 0) (<= (q1 q1-front) (+ N (- 1))))
(and (= (+ q2-back (- q2-front)) 0) (<= (q1 (+ q1-front 1)) (+ N (- 1))))
(and (not (<= (+ j (- i) 1) 0)) (<= j i))
(and (not (<= (+ j (- i) 1) 0)) (=> (not (<= (+ j (- i)) 0)) (<= j N)))
(ite (<= (+ i (- j)) 0) (<= j i) (<= i N))
(ite (<= (+ i (- j)) 0) (=> (<= (+ i (- j) 1) 0) (<= j N)) (<= i N))
(ite (not (<= (+ j (- i) 1) 0)) (=> (not (<= (+ j (- i)) 0)) (<= j N)) (<= i N))
(not (<= (+ N (- i)) 0))
(not (<= (+ N (- j)) 0))
(not (<= (+ i (- N) 1) 0))
)

(assume (and
  (= i j 0)
  (= q1-front q1-back)
  (= q2-front q2-back)))

(par
  (while (< i N)
    (atomic
      (assume (= (q2 q2-back) i))
      (set! q2-back (+ q2-back 1)))
    (atomic
      (assume (> q1-back q1-front))
      (set! i (q1 q1-front))
      (set! q1-front (+ q1-front 1)))
    (set! i (+ i 1)))
  (while (< j N)
    (atomic
      (assume (= (q1 q1-back) j))
      (set! q1-back (+ q1-back 1)))
    (atomic
      (assume (> q2-back q2-front))
      (set! j (q2 q2-front))
      (set! q2-front (+ q2-front 1)))
    (set! j (+ j 1))))

(assume (not (= i j)))
