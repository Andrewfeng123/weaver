; -m total-progress-context-opt --semi -b rr
(var produce update (Int) Int)
(var done (Int) Bool)
(var consume (Int Int) Int)
(var queue1 (Int) Int)
(var front1 size1 state11 state12 Int)
(var finished1 Bool)
(var state21 state22 Int)
(var finished2 Bool)
(use
finished2
false
true
(<= size1 0)
(<= size1 1)
(<= 0 size1)
(<= 1 size1)
(= state11 state21)
(= state22 state12)
(= (consume state22 (produce state21)) state12)
(= (update state21) state11)
(and finished1 finished2)
(and (done state11) finished1)
(and (done state21) finished1)
(and (<= size1 0) (and (<= 0 size1) (and (= state11 state21) (not (and (= (produce state21) (produce state11)) (not (= state22 state12)))))))
(and (<= size1 0) (and (<= 0 size1) (and (= state22 state12) (= (update state21) state11))))
(and (<= size1 0) (and (and (= state11 state21) (= state12 state22)) (<= 0 size1)))
(and (= state12 state22) (= (queue1 front1) (produce state21)))
(and (= state22 state12) (= (produce state21) (queue1 front1)))
(and (and (<= size1 0) (<= 0 size1)) (and (= state22 state12) (= state11 state21)))
(and (and (= state11 state21) (= state12 state22)) (and (<= size1 0) (<= 0 size1)))
(and (and (= state22 state12) (= (update state21) state11)) (and (<= size1 0) (<= 0 size1)))
(and (not finished2) (not finished1))
(and (<= size1 1) (and (= state11 state21) (and (= state12 state22) (and (= state11 state21) (= (queue1 front1) (produce state11))))))
(and (<= size1 0) (and (<= 0 size1) (and (and (= state11 state21) (= state12 state22)) (<= size1 0))))
(and (<= size1 0) (and (<= 0 size1) (and (= state11 state21) (not (and (= (produce state21) (produce state11)) (not (= (consume state22 (produce state21)) state12)))))))
(not finished1)
(not finished2)
(not (and finished1 (<= size1 0)))
(not (and finished1 (not (done state21))))
(not (and (done state21) (not finished1)))
(not (and (not finished1) finished2))
(not (and (not (done state11)) finished1))
)

;(use (<= 0 size1)
;     (<= 0 (+ size1 (- 1)))
;     (= state11 (update state21))
;     (= state12 state22)
;     (= state12 (consume state22 (produce state21)))
;     (= state21 state11)
;     (=> (not finished2) (not finished1))
;     (if (not (= size1 0)) (<= size1 0) (and (= state11 state21) (= state22 state12)))
;     (if (not (= size1 0)) (<= size1 0) (and (= state11 (update state21)) (= state12 state22)))
;     (if (not (= size1 0)) (<= size1 0) (and (= state12 (consume state22 (produce state21))) (= state11 state21)))
;     (not finished1)
;     (not finished2)
;     (or finished1 (not finished2))
;     (or (<= size1 0) (and (= state11 state21) (= state12 state22) (= (queue1 front1) (produce state21)) (<= size1 1)))
;     (or (<= size1 0) (and (= (queue1 front1) (produce state21)) (= state22 state12)))
;     (or (= true (done state21)) (not finished1))
;     (or (= (done state11) true) (not finished1))
;     (or (not (= (done state21) true)) finished1))

(assume
  (and (= state11 state21)
       (= state12 state22)
       (= finished1 finished2 false)
       (= size1 0)))

(par
  (while (not finished1)
    (atomic
      (assume (= (queue1 (+ front1 size1)) (produce state11)))
      (set! size1 (+ size1 1)))
    (set! state11   (update state11))
    (set! finished1 (done   state11)))
  (while (or (not finished1) (> size1 0))
    (atomic
      (assume (> size1 0))
      (set! state12 (consume state12 (queue1 front1)))
      (set! front1  (+ front1 1))
      (set! size1   (- size1  1))))
  (while (not finished2)
    (set! state22   (consume state22 (produce state21)))
    (set! state21   (update  state21))
    (set! finished2 (done    state21))))

(assume (not (= state12 state22)))
