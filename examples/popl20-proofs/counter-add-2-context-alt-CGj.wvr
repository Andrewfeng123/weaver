; -m total-progress-opt --semi -b rr
(var j1 j2 M1 M2 counter Int)
(use
false
true
(<= counter 0)
(<= j1 0)
(<= j2 0)
(<= 1 (+ M2 (* (- 1) j2)))
(<= (+ j1 (* (- 1) M1)) (- 1))
(<= (+ j2 (* (- 1) M2)) (- 1))
(and (<= counter 0) (<= 0 counter))
(and (<= counter 0) (<= 1 (+ M2 (* (- 1) j2))))
(and (<= counter 0) (and (<= 0 counter) (and (<= j1 0) (<= j2 j1))))
(and (<= counter 0) (and (<= 0 counter) (and (<= j2 j1) (<= j1 j2))))
(and (<= counter 0) (and (<= 0 counter) (and (<= j2 j1) (<= (+ j1 (* (- 1) M2)) (- 1)))))
(and (<= counter 0) (and (<= 0 counter) (and (<= j2 j1) (<= (+ j1 (+ (* (- 1) j2) (* (- 1) counter))) 0))))
(and (<= counter 0) (and (<= 0 counter) (and (<= 0 (+ j1 (+ (* (- 1) j2) (* (- 1) counter)))) (<= j1 j2))))
(and (<= j1 0) (<= j2 j1))
(and (<= j1 0) (<= j2 0))
(and (<= j1 0) (<= 0 j1))
(and (<= j2 j1) (<= j1 j2))
(and (<= 0 counter) (<= counter 0))
(and (<= 0 counter) (and (<= 0 (+ j1 (+ (* (- 1) counter) (* (- 1) j2)))) (<= j1 j2)))
(and (<= 0 counter) (and (<= 0 (+ j1 (+ (* (- 1) counter) (* (- 1) j2)))) (<= (+ j1 (* (- 1) M2)) (- 1))))
(and (<= 0 counter) (and (<= 0 (+ j1 (+ (* (- 1) counter) (* (- 1) j2)))) (<= (+ j1 (+ (* (- 1) counter) (* (- 1) j2))) 0)))
(and (<= 0 (+ M1 (+ (* (- 1) M2) (* (- 1) counter)))) (<= 0 (+ M2 (+ counter (* (- 1) j1)))))
(and (<= 0 (+ M1 (+ (* (- 1) M2) (* (- 1) counter)))) (<= 0 (+ M2 (+ (* (- 1) j1) counter))))
(and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (<= (+ M1 (* (- 1) j2)) 1))
(and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (<= (+ M1 (+ (* (- 1) j2) (* (- 1) counter))) 0))
(and (<= 0 (+ M2 (+ counter (* (- 1) j1)))) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))))
(and (<= 0 (+ M2 (+ counter (* (- 1) j1)))) (<= 1 (+ M1 (+ (* (- 1) M2) (* (- 1) counter)))))
(and (<= 0 (+ M2 (+ counter (* (- 1) j1)))) (<= (+ M2 (+ counter (* (- 1) j1))) 0))
(and (<= 0 (+ M2 (+ counter (* (- 1) j1)))) (<= (+ j2 (+ counter (* (- 1) j1))) 0))
(and (<= 0 (+ M2 (+ (* (- 1) j1) counter))) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))))
(and (<= 0 (+ M2 (+ (* (- 1) j1) counter))) (<= 0 (+ j1 (+ (* (- 1) counter) (* (- 1) j2)))))
(and (<= 0 (+ M2 (+ (* (- 1) j1) counter))) (<= 1 (+ M1 (+ (* (- 1) counter) (* (- 1) j2)))))
(and (<= 0 (+ M2 (+ (* (- 1) j1) counter))) (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))))
(and (<= 0 (+ j2 (+ counter (* (- 1) j1)))) (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))))
(and (<= 0 (+ j2 (+ counter (* (- 1) j1)))) (<= (+ j2 (+ counter (* (- 1) j1))) 0))
(and (<= 1 counter) (<= counter 1))
(and (<= 1 counter) (and (<= 0 (+ j1 (+ (* (- 1) j2) (* (- 1) counter)))) (<= j1 M2)))
(and (<= 1 counter) (and (<= 0 (+ j1 (+ (* (- 1) j2) (* (- 1) counter)))) (<= (+ j1 (* (- 1) j2)) 1)))
(and (<= 1 counter) (and (<= 0 (+ j1 (+ (* (- 1) j2) (* (- 1) counter)))) (<= (+ j1 (+ (* (- 1) j2) (* (- 1) counter))) 0)))
(and (<= 1 counter) (and (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (<= j1 M2)))
(and (<= 1 counter) (and (<= (+ j2 (+ counter (* (- 1) j1))) 0) (<= (- 1) (+ j2 (* (- 1) j1)))))
(and (<= 1 counter) (and (<= (- 1) (+ j2 (* (- 1) j1))) (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 1 (+ M2 (* (- 1) j2))) (<= counter 0))
(and (<= 2 counter) (<= counter 2))
(and (<= 2 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (<= (+ M1 (* (- 1) j2)) 2)))
(and (<= 2 counter) (and (<= 0 (+ j2 (+ counter (* (- 1) j1)))) (<= (+ j2 (+ counter (* (- 1) j1))) 0)))
(and (<= 2 counter) (and (<= (- 2) (+ j2 (* (- 1) j1))) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 2 counter) (and (<= (- 2) (+ j2 (* (- 1) j1))) (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 2 counter) (and (<= (- 2) (+ j2 (* (- 1) j1))) (<= (+ j2 (+ counter (* (- 1) j1))) 0)))
(and (<= 3 counter) (and (<= 0 (+ j2 (+ counter (* (- 1) j1)))) (<= (+ j2 (+ counter (* (- 1) j1))) 0)))
(and (<= 3 counter) (and (<= (- 3) (+ j2 (* (- 1) j1))) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= (+ M1 (+ (* (- 1) M2) (* (- 1) counter))) 0) (<= 0 (+ M1 (+ (* (- 1) M2) (* (- 1) counter)))))
(and (<= (+ M1 (+ (* (- 1) M2) (* (- 1) counter))) 0) (<= 0 (+ M1 (+ (* (- 1) counter) (* (- 1) j2)))))
(and (<= (+ M1 (+ (* (- 1) M2) (* (- 1) counter))) 0) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))))
(and (<= (+ j2 (* (- 1) M2)) (- 1)) (<= counter 0))
(and (<= 0 counter) (and (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 0 counter) (<= 0 (+ j2 (+ (* (- 1) j1) counter))))))
(and (<= 1 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1)))))))
(and (<= 1 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 counter) (<= 1 (+ M2 (+ counter (* (- 1) j1)))))))
(and (<= 1 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= (+ M1 (+ (* (- 1) M2) (* (- 1) counter))) (- 1)) (<= 1 counter))))
(and (<= counter 0) (and (<= 0 counter) (and (<= j2 j1) (and (<= 0 counter) (<= (+ j1 (+ (* (- 1) j2) (* (- 1) counter))) 0)))))
(and (<= counter 0) (and (<= 0 counter) (and (<= 0 (+ j1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 0 counter) (<= (+ j1 (+ (* (- 1) j2) (* (- 1) counter))) 0)))))
(and (<= counter 0) (and (<= 0 counter) (and (<= (+ j2 (+ counter (* (- 1) M1))) (- 1)) (and (<= 0 counter) (<= (+ j1 (+ (* (- 1) counter) (* (- 1) M2))) (- 1))))))
(and (<= counter 0) (and (<= 0 counter) (and (and (<= 0 counter) (<= j1 counter)) (<= 0 (+ j1 (+ (* (- 1) j2) (* (- 1) counter)))))))
(and (<= counter 0) (and (<= 0 counter) (and (and (<= 0 counter) (<= j1 counter)) (<= (+ j2 counter) 0))))
(and (<= counter 0) (and (<= 0 counter) (and (and (<= 0 counter) (<= j1 counter)) (<= (+ j2 (+ counter (* (- 1) M1))) (- 1)))))
(and (<= counter 0) (and (<= 0 counter) (and (and (<= 0 counter) (<= (+ j1 (+ (* (- 1) counter) (* (- 1) M2))) (- 1))) (<= 0 (+ j1 (+ (* (- 1) j2) (* (- 1) counter)))))))
(and (<= 0 counter) (and (<= 0 (+ j1 (+ (* (- 1) counter) (* (- 1) j2)))) (and (<= 0 counter) (<= (+ j1 (+ (* (- 1) counter) (* (- 1) j2))) 0))))
(and (<= 0 counter) (and (and (<= 0 counter) (<= (+ j1 (+ (* (- 1) M2) (* (- 1) counter))) (- 1))) (<= 0 (+ j1 (+ (* (- 1) counter) (* (- 1) j2))))))
(and (<= 0 counter) (and (and (<= 0 counter) (<= (+ j1 (+ (* (- 1) M2) (* (- 1) counter))) (- 1))) (<= 1 (+ M1 (+ (* (- 1) counter) (* (- 1) j2))))))
(and (<= 1 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 counter) (<= (+ M1 (+ (* (- 1) M2) (* (- 1) counter))) (- 1)))))
(and (<= 1 counter) (and (<= 0 (+ j1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 counter) (<= (+ j1 (+ (* (- 1) j2) (* (- 1) counter))) 0))))
(and (<= 1 counter) (and (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 counter) (<= (+ j1 (+ (* (- 1) j2) (* (- 1) counter))) 0))))
(and (<= 1 counter) (and (and (<= 1 counter) (<= 1 (+ M2 (+ (* (- 1) j1) counter)))) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 1 counter) (and (and (<= 1 counter) (<= 1 (+ M2 (+ (* (- 1) j1) counter)))) (<= 0 (+ j1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 1 counter) (and (and (<= 1 counter) (<= 1 (+ M2 (+ (* (- 1) j1) counter)))) (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 1 (+ M2 (* (- 1) j2))) (and (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 (+ M2 (* (- 1) j2))) (<= 1 (+ M2 (+ counter (* (- 1) j1)))))))
(and (<= 1 (+ M2 (* (- 1) j2))) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 (+ M2 (* (- 1) j2))) (<= M1 M2))))
(and (<= 1 (+ M2 (* (- 1) j2))) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 (+ M2 (* (- 1) j2))) (<= (+ M1 (+ (* (- 1) M2) (* (- 1) counter))) (- 1)))))
(or (<= 1 (+ M2 (* (- 1) j2))) (and (or (<= 1 (+ M2 (* (- 1) j2))) (<= 0 (+ M2 (+ counter (* (- 1) j1))))) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(or (<= 1 (+ M2 (* (- 1) j2))) (and (or (<= 1 (+ M2 (* (- 1) j2))) (<= 0 (+ M2 (+ (* (- 1) j1) counter)))) (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 2 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 2 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1)))))))
(and (<= 2 counter) (and (and (<= 2 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1))))) (<= (+ j2 (+ counter (* (- 1) j1))) 0)))
(and (<= 2 counter) (and (and (<= 2 counter) (<= 1 (+ M2 (+ counter (* (- 1) j1))))) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 1 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1)))))))
(and (<= 1 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 counter) (<= (+ M1 (+ (* (- 1) M2) (* (- 1) counter))) (- 1)))))
(and (<= 1 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 1 counter) (<= (+ M1 (+ (* (- 1) j2) (* (- 1) counter))) 0))))
(or (<= 1 (+ M2 (* (- 1) j2))) (and (or (<= 1 (+ M2 (* (- 1) j2))) (<= (+ M1 (+ (* (- 1) M2) (* (- 1) counter))) 0)) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 3 counter) (and (<= (+ j2 (+ counter (* (- 1) j1))) 0) (and (<= 3 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1)))))))
(and (<= 3 counter) (and (and (<= 3 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1))))) (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 2 counter) (and (<= 1 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 2 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1)))))))
(and (<= 2 counter) (and (<= (+ j2 (+ counter (* (- 1) j1))) 0) (and (<= 2 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1)))))))
(and (<= 4 counter) (and (and (<= 4 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1))))) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
(and (<= 3 counter) (and (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter)))) (and (<= 3 counter) (<= (+ M1 (+ (* (- 1) j2) (* (- 1) counter))) 0))))
(and (<= 3 counter) (and (and (<= 3 counter) (<= 0 (+ j2 (+ counter (* (- 1) j1))))) (<= 0 (+ M1 (+ (* (- 1) j2) (* (- 1) counter))))))
)

(assume (= j1 0))
(assume (= j2 0))
(assume (= counter 0))
(assume (< 0 M1))
(assume (< 0 M2))

(par
  (while (< j1 M1)
    (atomic
      (set! counter (+ counter 1))
      (set! j1 (+ j1 1))))
  (while (< j2 M2)
    (atomic
      (set! j2 (if (< 0 counter) (+ j2 1) j2))
      (set! counter (if (< 0 counter) (- counter 1) counter)))))

(assume (not (= counter (- M1 M2))))
