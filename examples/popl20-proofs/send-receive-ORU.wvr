; -m total-progress-context-opt -b rr
(var queue (Int) Int)
(var front back Int)
(var sum Int)
(var assert b Bool)
(use
assert
b
false
true
(<= back front)
(<= front back)
(<= (+ front (* (- 1) back)) (- 1))
(<= (- 1) (+ front (* (- 1) back)))
(= front back)
(and assert (and (<= sum 1) (<= 1 sum)))
(and assert (and (<= 0 sum) (<= sum 0)))
(and assert (and (<= (+ sum (queue front)) 1) (<= 1 (+ sum (queue front)))))
(and assert (and (and (<= (+ sum (queue front)) 1) (<= 1 (+ sum (queue front)))) (<= (- 1) (+ front (* (- 1) back)))))
(and assert (or (<= back front) (and (<= 0 (+ sum (queue front))) (<= (+ sum (queue front)) 0))))
(and assert (or (<= back front) (and (<= (+ sum (queue front)) 1) (<= 1 (+ sum (queue front))))))
(and (<= sum 1) (<= 1 sum))
(and (<= 0 sum) (<= sum 0))
(and (<= 0 sum) (and (= front back) (<= sum 0)))
(and (<= (- 1) (+ front (* (- 1) back))) (not (and (not (<= back front)) (and (not (and (<= 0 (+ sum (queue front))) (<= (+ sum (queue front)) 0))) (not (<= (+ front (* (- 1) back)) (- 2)))))))
(and (= front back) (<= back front))
(and (and assert (and (<= (+ sum (queue front)) 1) (<= 1 (+ sum (queue front))))) (<= (- 1) (+ front (* (- 1) back))))
(and (and (<= 0 (+ sum (queue front))) (<= (+ sum (queue front)) 0)) (<= (- 1) (+ front (* (- 1) back))))
(and (and (<= (+ sum (queue front)) 1) (<= 1 (+ sum (queue front)))) (<= (- 1) (+ front (* (- 1) back))))
(and (not assert) (not (and (<= 0 sum) (<= sum 1))))
(and (not (and (<= 0 sum) (<= sum 1))) (not assert))
(and assert (and (<= back front) (and (and (= front back) (<= sum 0)) (and (= front back) (<= 0 sum)))))
(and assert (and (and (= front back) (<= sum 0)) (and (= front back) (<= 0 sum))))
(and (<= back front) (and assert (and (and (= front back) (<= sum 0)) (and (= front back) (<= 0 sum)))))
(and (<= back front) (and (and (= front back) (<= sum 0)) (and (= front back) (<= 0 sum))))
(and (and (= front back) (<= sum 0)) (and (= front back) (<= 0 sum)))
(and (<= back front) (and (and (= front back) (<= 0 sum)) (and (<= back front) (and (= front back) (<= sum 0)))))
(and (<= (queue front) (- 1)) (and (<= 0 (+ sum (queue front))) (and (<= sum 1) (<= (queue front) (- 1)))))
(and (not (and (not assert) (and (<= 0 sum) (<= sum 1)))) (not (and assert (not (and (<= 0 sum) (<= sum 1))))))
(and (<= (- 1) (+ front (* (- 1) back))) (and (<= 1 (+ sum (queue front))) (and (<= (+ sum (queue front)) 1) (<= (- 1) (+ front (* (- 1) back))))))
(and (<= (+ sum (queue front)) 1) (and (and (<= 0 sum) (<= sum 0)) (= (queue front) 1)))
(and (not (and (not assert) (and (<= 0 sum) (<= sum 1)))) (not (and assert (not (and (<= 0 sum) (<= sum 1))))))
(and assert (or (<= (+ back (* (- 1) front)) (- 1)) (and (and (<= sum 1) (= back front)) (and (<= 1 sum) (= back front)))))
(and (= back front) (and (and (<= sum 1) (= back front)) (and (<= 1 sum) (= back front))))
(and (<= back front) (and (and (<= sum 1) (= back front)) (and (<= 1 sum) (= back front))))
(and (<= back front) (not (and (not (<= (+ back (* (- 1) front)) (- 1))) (and (not (and (and (<= sum 1) (= back front)) (and (<= 1 sum) (= back front)))) (not (<= 1 (+ back (* (- 1) front))))))))
(or (<= (+ back (* (- 1) front)) (- 1)) (and assert (and (<= back front) (and (and (<= sum 1) (= back front)) (and (<= 1 sum) (= back front))))))
(or (<= (+ back (* (- 1) front)) (- 1)) (and (<= back front) (and (and (<= sum 1) (= back front)) (and (<= 1 sum) (= back front)))))
(or (<= (+ back (* (- 1) front)) (- 1)) (and (and (<= sum 1) (= back front)) (and (<= 1 sum) (= back front))))
(and (not (and (and (<= 0 sum) (<= sum 1)) (not assert))) (not (and (not (and (<= 0 sum) (<= sum 1))) assert)))
(and (and (<= sum 0) (= back front)) (and (and (<= 0 sum) (<= sum 0)) (= back front)))
(and (<= 0 sum) (and (<= (+ sum (queue front)) 1) (<= 1 (queue front))))
(and assert (or (<= (+ back (* (- 1) front)) (- 1)) (and (and (<= sum 0) (= back front)) (and (<= 0 sum) (= back front)))))
(or (<= (+ back (* (- 1) front)) (- 1)) (and (and (<= sum 0) (= back front)) (and (<= 0 sum) (= back front))))
(and (not (and (not assert) (and (<= 0 sum) (<= sum 1)))) (not (and assert (not (and (<= 0 sum) (<= sum 1))))))
(not b)
(not (and (and (<= 0 sum) (<= sum 1)) (not assert)))
(not (and (not assert) (and (<= 0 sum) (<= sum 1))))
(or (<= back front) (and assert (and (and (<= 0 (+ sum (queue front))) (<= (+ sum (queue front)) 0)) (<= (- 1) (+ front (* (- 1) back))))))
(or (<= back front) (and (<= 0 (+ sum (queue front))) (<= (+ sum (queue front)) 0)))
(or (<= back front) (and (<= (+ sum (queue front)) 1) (<= 1 (+ sum (queue front)))))
(or (<= back front) (and (and (<= 0 (+ sum (queue front))) (<= (+ sum (queue front)) 0)) (<= (- 1) (+ front (* (- 1) back)))))
)

(assume (= front back))
(assume (= sum 0))
(assume assert)
(assume b)

(par
  (while assert
    (atomic
      (assume (> back front))
      (set! sum (+ sum (queue front)))
      (set! front (+ front 1))))
  (while assert
    (if b
      (atomic
        (assume (= (queue back) 1))
        (set! back (+ back 1)))
      (atomic
        (assume (= (queue back) (- 1)))
        (set! back (+ back 1))))
    (set! b (not b)))
  (set! assert (and (<= 0 sum) (<= sum 1))))
