(var index-of!0 (Int) Int)
(var char-at!1 (Int) Int)
(var count-occurrences-of!2 (Int) Int)
(var last-index-of!3 (Int) Int)
(var index-of!4 (Int) Int)
(var char-at!5 (Int) Int)
(var count-occurrences-of!6 (Int) Int)
(var last-index-of!7 (Int) Int)
(var result!8 () Int)
(var i1!9 () Int)
(var break!10 () Bool)
(var i2!11 () Int)
(var break!12 () Bool)
(var result!13 () Int)
(var i1!14 () Int)
(var break!15 () Bool)
(var i2!16 () Int)
(var break!17 () Bool)
(par
  (cond
    (seq
      (atomic (assume (and (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1))) (= (index-of!0 4) (index-of!4 4))))
              (set! i1!9 0)
              (set! break!10 false))
      (loop
        (atomic (assume (and (not break!10) (<= i1!9 12)))
                (set! result!8 (if (and (/= (char-at!1 i1!9) 0) (and (/= (char-at!1 i1!9) 4) (and (/= (char-at!5 i1!9) 0) (/= (char-at!5 i1!9) 4)))) 0 (if (and (/= (char-at!1 i1!9) 0) (/= (char-at!1 i1!9) 4)) (- 0 1) (if (and (/= (char-at!5 i1!9) 0) (/= (char-at!5 i1!9) 4)) 1 result!8))))
                (set! break!10 (if (or (and (/= (char-at!1 i1!9) 0) (/= (char-at!1 i1!9) 4)) (and (/= (char-at!5 i1!9) 0) (/= (char-at!5 i1!9) 4))) true break!10))
                (set! i1!9 (+ i1!9 1))))
      (atomic (assume (not (and (not break!10) (<= i1!9 12))))
              (set! result!8 (if (not break!10) (- (index-of!0 4) (index-of!4 4)) result!8))))
    (atomic (assume (and (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1))) (not (= (index-of!0 4) (index-of!4 4)))))
            (set! result!8 (- (index-of!0 4) (index-of!4 4))))
    (seq
      (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
              (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
              (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
              (assume (= (last-index-of!3 3) (last-index-of!7 3)))
              (set! i2!11 0)
              (set! break!12 false))
      (loop
        (atomic (assume (and (not break!12) (<= i2!11 12)))
                (set! result!8 (if (and (/= i2!11 (last-index-of!3 3)) (and (or (= (char-at!1 i2!11) 2) (= (char-at!1 i2!11) 3)) (or (= (char-at!5 i2!11) 2) (= (char-at!5 i2!11) 3)))) 0 (if (and (/= i2!11 (last-index-of!3 3)) (or (= (char-at!1 i2!11) 2) (= (char-at!1 i2!11) 3))) (- 0 1) (if (and (/= i2!11 (last-index-of!3 3)) (or (= (char-at!5 i2!11) 2) (= (char-at!5 i2!11) 3))) 1 result!8))))
                (set! break!12 (if (and (/= i2!11 (last-index-of!3 3)) (or (= (char-at!1 i2!11) 2) (or (= (char-at!1 i2!11) 3) (or (= (char-at!5 i2!11) 2) (= (char-at!5 i2!11) 3))))) true break!12))))
      (atomic (assume (not (and (not break!12) (<= i2!11 12))))
              (set! result!8 (if (not break!12) (- (last-index-of!3 3) (last-index-of!7 3)) result!8))))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
            (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
            (assume (not (= (last-index-of!3 3) (last-index-of!7 3))))
            (set! result!8 (- (last-index-of!3 3) (last-index-of!7 3))))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1))))))
            (set! result!8 1))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1))))))
            (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
            (set! result!8 (- 0 1)))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1))))))
            (assume (not (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1))))))
            (set! result!8 0)))
  (cond
    (seq
      (atomic (assume (and (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!0 4) (- 0 1))) (= (index-of!4 4) (index-of!0 4))))
              (set! i1!14 0)
              (set! break!15 false))
      (loop
        (atomic (assume (and (not break!15) (<= i1!14 12)))
                (set! result!13 (if (and (/= (char-at!5 i1!14) 0) (and (/= (char-at!5 i1!14) 4) (and (/= (char-at!1 i1!14) 0) (/= (char-at!1 i1!14) 4)))) 0 (if (and (/= (char-at!5 i1!14) 0) (/= (char-at!5 i1!14) 4)) (- 0 1) (if (and (/= (char-at!1 i1!14) 0) (/= (char-at!1 i1!14) 4)) 1 result!13))))
                (set! break!15 (if (or (and (/= (char-at!5 i1!14) 0) (/= (char-at!5 i1!14) 4)) (and (/= (char-at!1 i1!14) 0) (/= (char-at!1 i1!14) 4))) true break!15))
                (set! i1!14 (+ i1!14 1))))
      (atomic (assume (not (and (not break!15) (<= i1!14 12))))
              (set! result!13 (if (not break!15) (- (index-of!4 4) (index-of!0 4)) result!13))))
    (atomic (assume (and (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!0 4) (- 0 1))) (not (= (index-of!4 4) (index-of!0 4)))))
            (set! result!13 (- (index-of!4 4) (index-of!0 4))))
    (seq
      (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!0 4) (- 0 1)))))
              (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
              (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
              (assume (= (last-index-of!7 3) (last-index-of!3 3)))
              (set! i2!16 0)
              (set! break!17 false))
      (loop
        (atomic (assume (and (not break!17) (<= i2!16 12)))
                (set! result!13 (if (and (/= i2!16 (last-index-of!7 3)) (and (or (= (char-at!5 i2!16) 2) (= (char-at!5 i2!16) 3)) (or (= (char-at!1 i2!16) 2) (= (char-at!1 i2!16) 3)))) 0 (if (and (/= i2!16 (last-index-of!7 3)) (or (= (char-at!5 i2!16) 2) (= (char-at!5 i2!16) 3))) (- 0 1) (if (and (/= i2!16 (last-index-of!7 3)) (or (= (char-at!1 i2!16) 2) (= (char-at!1 i2!16) 3))) 1 result!13))))
                (set! break!17 (if (and (/= i2!16 (last-index-of!7 3)) (or (= (char-at!5 i2!16) 2) (or (= (char-at!5 i2!16) 3) (or (= (char-at!1 i2!16) 2) (= (char-at!1 i2!16) 3))))) true break!17))))
      (atomic (assume (not (and (not break!17) (<= i2!16 12))))
              (set! result!13 (if (not break!17) (- (last-index-of!7 3) (last-index-of!3 3)) result!13))))
    (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!0 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
            (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
            (assume (not (= (last-index-of!7 3) (last-index-of!3 3))))
            (set! result!13 (- (last-index-of!7 3) (last-index-of!3 3))))
    (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!0 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1))))))
            (set! result!13 1))
    (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!0 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1))))))
            (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
            (set! result!13 (- 0 1)))
    (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!0 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1))))))
            (assume (not (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1))))))
            (set! result!13 0))))
(assume (not (= (if (< result!8 0) (- 1) (if (> result!8 0) 1 0)) (- 0 (if (< result!13 0) (- 1) (if (> result!13 0) 1 0))))))