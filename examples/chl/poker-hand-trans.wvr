(var index-of!0 (Int) Int)
(var char-at!1 (Int) Int)
(var count-occurrences-of!2 (Int) Int)
(var last-index-of!3 (Int) Int)
(var index-of!4 (Int) Int)
(var char-at!5 (Int) Int)
(var count-occurrences-of!6 (Int) Int)
(var last-index-of!7 (Int) Int)
(var index-of!8 (Int) Int)
(var char-at!9 (Int) Int)
(var count-occurrences-of!10 (Int) Int)
(var last-index-of!11 (Int) Int)
(var result!12 () Int)
(var i1!13 () Int)
(var break!14 () Bool)
(var i2!15 () Int)
(var break!16 () Bool)
(var result!17 () Int)
(var i1!18 () Int)
(var break!19 () Bool)
(var i2!20 () Int)
(var break!21 () Bool)
(var result!22 () Int)
(var i1!23 () Int)
(var break!24 () Bool)
(var i2!25 () Int)
(var break!26 () Bool)
(par
  (cond
    (seq
      (atomic (assume (and (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1))) (= (index-of!0 4) (index-of!4 4))))
              (set! i1!13 0)
              (set! break!14 false))
      (loop
        (atomic (assume (and (not break!14) (<= i1!13 12)))
                (set! result!12 (if (and (/= (char-at!1 i1!13) 0) (and (/= (char-at!1 i1!13) 4) (and (/= (char-at!5 i1!13) 0) (/= (char-at!5 i1!13) 4)))) 0 (if (and (/= (char-at!1 i1!13) 0) (/= (char-at!1 i1!13) 4)) (- 0 1) (if (and (/= (char-at!5 i1!13) 0) (/= (char-at!5 i1!13) 4)) 1 result!12))))
                (set! break!14 (if (or (and (/= (char-at!1 i1!13) 0) (/= (char-at!1 i1!13) 4)) (and (/= (char-at!5 i1!13) 0) (/= (char-at!5 i1!13) 4))) true break!14))
                (set! i1!13 (+ i1!13 1))))
      (atomic (assume (not (and (not break!14) (<= i1!13 12))))
              (set! result!12 (if (not break!14) (- (index-of!0 4) (index-of!4 4)) result!12))))
    (atomic (assume (and (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1))) (not (= (index-of!0 4) (index-of!4 4)))))
            (set! result!12 (- (index-of!0 4) (index-of!4 4))))
    (seq
      (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
              (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
              (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
              (assume (= (last-index-of!3 3) (last-index-of!7 3)))
              (set! i2!15 0)
              (set! break!16 false))
      (loop
        (atomic (assume (and (not break!16) (<= i2!15 12)))
                (set! result!12 (if (and (/= i2!15 (last-index-of!3 3)) (and (or (= (char-at!1 i2!15) 2) (= (char-at!1 i2!15) 3)) (or (= (char-at!5 i2!15) 2) (= (char-at!5 i2!15) 3)))) 0 (if (and (/= i2!15 (last-index-of!3 3)) (or (= (char-at!1 i2!15) 2) (= (char-at!1 i2!15) 3))) (- 0 1) (if (and (/= i2!15 (last-index-of!3 3)) (or (= (char-at!5 i2!15) 2) (= (char-at!5 i2!15) 3))) 1 result!12))))
                (set! break!16 (if (and (/= i2!15 (last-index-of!3 3)) (or (= (char-at!1 i2!15) 2) (or (= (char-at!1 i2!15) 3) (or (= (char-at!5 i2!15) 2) (= (char-at!5 i2!15) 3))))) true break!16))))
      (atomic (assume (not (and (not break!16) (<= i2!15 12))))
              (set! result!12 (if (not break!16) (- (last-index-of!3 3) (last-index-of!7 3)) result!12))))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
            (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
            (assume (not (= (last-index-of!3 3) (last-index-of!7 3))))
            (set! result!12 (- (last-index-of!3 3) (last-index-of!7 3))))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1))))))
            (set! result!12 1))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1))))))
            (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
            (set! result!12 (- 0 1)))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!4 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1))))))
            (assume (not (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1))))))
            (set! result!12 0)))
  (cond
    (seq
      (atomic (assume (and (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!8 4) (- 0 1))) (= (index-of!4 4) (index-of!8 4))))
              (set! i1!18 0)
              (set! break!19 false))
      (loop
        (atomic (assume (and (not break!19) (<= i1!18 12)))
                (set! result!17 (if (and (/= (char-at!5 i1!18) 0) (and (/= (char-at!5 i1!18) 4) (and (/= (char-at!9 i1!18) 0) (/= (char-at!9 i1!18) 4)))) 0 (if (and (/= (char-at!5 i1!18) 0) (/= (char-at!5 i1!18) 4)) (- 0 1) (if (and (/= (char-at!9 i1!18) 0) (/= (char-at!9 i1!18) 4)) 1 result!17))))
                (set! break!19 (if (or (and (/= (char-at!5 i1!18) 0) (/= (char-at!5 i1!18) 4)) (and (/= (char-at!9 i1!18) 0) (/= (char-at!9 i1!18) 4))) true break!19))
                (set! i1!18 (+ i1!18 1))))
      (atomic (assume (not (and (not break!19) (<= i1!18 12))))
              (set! result!17 (if (not break!19) (- (index-of!4 4) (index-of!8 4)) result!17))))
    (atomic (assume (and (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!8 4) (- 0 1))) (not (= (index-of!4 4) (index-of!8 4)))))
            (set! result!17 (- (index-of!4 4) (index-of!8 4))))
    (seq
      (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
              (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
              (assume (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1)))))
              (assume (= (last-index-of!7 3) (last-index-of!11 3)))
              (set! i2!20 0)
              (set! break!21 false))
      (loop
        (atomic (assume (and (not break!21) (<= i2!20 12)))
                (set! result!17 (if (and (/= i2!20 (last-index-of!7 3)) (and (or (= (char-at!5 i2!20) 2) (= (char-at!5 i2!20) 3)) (or (= (char-at!9 i2!20) 2) (= (char-at!9 i2!20) 3)))) 0 (if (and (/= i2!20 (last-index-of!7 3)) (or (= (char-at!5 i2!20) 2) (= (char-at!5 i2!20) 3))) (- 0 1) (if (and (/= i2!20 (last-index-of!7 3)) (or (= (char-at!9 i2!20) 2) (= (char-at!9 i2!20) 3))) 1 result!17))))
                (set! break!21 (if (and (/= i2!20 (last-index-of!7 3)) (or (= (char-at!5 i2!20) 2) (or (= (char-at!5 i2!20) 3) (or (= (char-at!9 i2!20) 2) (= (char-at!9 i2!20) 3))))) true break!21))))
      (atomic (assume (not (and (not break!21) (<= i2!20 12))))
              (set! result!17 (if (not break!21) (- (last-index-of!7 3) (last-index-of!11 3)) result!17))))
    (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
            (assume (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1)))))
            (assume (not (= (last-index-of!7 3) (last-index-of!11 3))))
            (set! result!17 (- (last-index-of!7 3) (last-index-of!11 3))))
    (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1))))))
            (set! result!17 1))
    (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1))))))
            (assume (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1)))))
            (set! result!17 (- 0 1)))
    (atomic (assume (not (or (/= (index-of!4 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!6 3) 1) (and (= (count-occurrences-of!6 3) 1) (/= (index-of!4 2) (- 0 1))))))
            (assume (not (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1))))))
            (set! result!17 0)))
  (cond
    (seq
      (atomic (assume (and (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!8 4) (- 0 1))) (= (index-of!0 4) (index-of!8 4))))
              (set! i1!23 0)
              (set! break!24 false))
      (loop
        (atomic (assume (and (not break!24) (<= i1!23 12)))
                (set! result!22 (if (and (/= (char-at!1 i1!23) 0) (and (/= (char-at!1 i1!23) 4) (and (/= (char-at!9 i1!23) 0) (/= (char-at!9 i1!23) 4)))) 0 (if (and (/= (char-at!1 i1!23) 0) (/= (char-at!1 i1!23) 4)) (- 0 1) (if (and (/= (char-at!9 i1!23) 0) (/= (char-at!9 i1!23) 4)) 1 result!22))))
                (set! break!24 (if (or (and (/= (char-at!1 i1!23) 0) (/= (char-at!1 i1!23) 4)) (and (/= (char-at!9 i1!23) 0) (/= (char-at!9 i1!23) 4))) true break!24))
                (set! i1!23 (+ i1!23 1))))
      (atomic (assume (not (and (not break!24) (<= i1!23 12))))
              (set! result!22 (if (not break!24) (- (index-of!0 4) (index-of!8 4)) result!22))))
    (atomic (assume (and (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!8 4) (- 0 1))) (not (= (index-of!0 4) (index-of!8 4)))))
            (set! result!22 (- (index-of!0 4) (index-of!8 4))))
    (seq
      (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
              (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
              (assume (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1)))))
              (assume (= (last-index-of!3 3) (last-index-of!11 3)))
              (set! i2!25 0)
              (set! break!26 false))
      (loop
        (atomic (assume (and (not break!26) (<= i2!25 12)))
                (set! result!22 (if (and (/= i2!25 (last-index-of!3 3)) (and (or (= (char-at!1 i2!25) 2) (= (char-at!1 i2!25) 3)) (or (= (char-at!9 i2!25) 2) (= (char-at!9 i2!25) 3)))) 0 (if (and (/= i2!25 (last-index-of!3 3)) (or (= (char-at!1 i2!25) 2) (= (char-at!1 i2!25) 3))) (- 0 1) (if (and (/= i2!25 (last-index-of!3 3)) (or (= (char-at!9 i2!25) 2) (= (char-at!9 i2!25) 3))) 1 result!22))))
                (set! break!26 (if (and (/= i2!25 (last-index-of!3 3)) (or (= (char-at!1 i2!25) 2) (or (= (char-at!1 i2!25) 3) (or (= (char-at!9 i2!25) 2) (= (char-at!9 i2!25) 3))))) true break!26))))
      (atomic (assume (not (and (not break!26) (<= i2!25 12))))
              (set! result!22 (if (not break!26) (- (last-index-of!3 3) (last-index-of!11 3)) result!22))))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
            (assume (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1)))))
            (assume (not (= (last-index-of!3 3) (last-index-of!11 3))))
            (set! result!22 (- (last-index-of!3 3) (last-index-of!11 3))))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
            (assume (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1))))))
            (set! result!22 1))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1))))))
            (assume (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1)))))
            (set! result!22 (- 0 1)))
    (atomic (assume (not (or (/= (index-of!0 4) (- 0 1)) (/= (index-of!8 4) (- 0 1)))))
            (assume (not (or (> (count-occurrences-of!2 3) 1) (and (= (count-occurrences-of!2 3) 1) (/= (index-of!0 2) (- 0 1))))))
            (assume (not (or (> (count-occurrences-of!10 3) 1) (and (= (count-occurrences-of!10 3) 1) (/= (index-of!8 2) (- 0 1))))))
            (set! result!22 0))))
(assume (not (=> (and (> result!12 0) (> result!17 0)) (> result!22 0))))