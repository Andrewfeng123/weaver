(var q1 (Int) Int)
(var q1-front q1-back Int)
(var q2 (Int) Int)
(var q2-front q2-back Int)
(var q3 (Int) Int)
(var q3-front q3-back Int)
(var i j k l r s t N Int)
(var f g Bool)

(assume (and
  (= q1-front q1-back)
  (= q2-front q2-back)
  (= q3-front q3-back)
  (>= N 0)))

(par
  (seq
    (set! i 0)
    (set! r 0)
    (while (< i N)
      (atomic
        (assume (= (q1 q1-back) 2))
        (set! q1-back (+ q1-back 1)))
      (atomic
        (assume (> q3-back q3-front))
        (set! l (q3 q3-front))
        (set! q3-front (+ q3-front 1)))
      (set! r (+ r l))
      (set! i (+ i 1)))
    (atomic
      (assume (= (q1 q1-back) 0))
      (set! q1-back (+ q1-back 1))))

  (seq
    (set! s 0)
    (set! f true)
    (while f
      (atomic
        (assume (> q1-back q1-front))
        (set! j (q1 q1-front))
        (set! q1-front (+ q1-front 1)))
      (atomic
        (assume (= (q2 q2-back) (- j 1)))
        (set! q2-back (+ q2-back 1)))
      (set! s (+ s j))
      (set! f (> j 0))))

  (seq
    (set! t 0)
    (set! g true)
    (while g
      (atomic
        (assume (> q2-back q2-front))
        (set! k (q2 q2-front))
        (set! q2-front (+ q2-front 1)))
      (atomic
        (assume (= (q3 q3-back) (- k 1)))
        (set! q3-back (+ q3-back 1)))
      (set! t (+ t k))
      (set! g (> k 0)))))

(assume (not (and (= r 0))))
;(assume (not (and (= r 0) (= s (* 2 N)) (= t (- N 1)))))
