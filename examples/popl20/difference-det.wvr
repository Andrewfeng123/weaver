(var i1 i2 N1 N2 counter1 Int)
(var j1 j2 M1 M2 counter2 Int)

(assume (= i1 0))
(assume (= i2 0))
(assume (= counter1 0))
(assume (= j1 0))
(assume (= j2 0))
(assume (= counter2 0))
(assume (= N1 M1))
(assume (= N2 M2))

(par
  (while (< i1 N1)
    (atomic
      (set! counter1 (+ counter1 1))
      (set! i1 (+ i1 1))))
  (while (< i2 N2)
    (atomic
      (assume (< 0 counter1))
      (set! counter1 (- counter1 1))
      (set! i2 (+ i2 1))))
  (while (< j1 M1)
    (atomic
      (set! counter2 (+ counter2 1))
      (set! j1 (+ j1 1))))
  (while (< j2 M2)
    (atomic
      (assume (< 0 counter2))
      (set! counter2 (- counter2 1))
      (set! j2 (+ j2 1)))))

(assume (not (= counter1 counter2)))
