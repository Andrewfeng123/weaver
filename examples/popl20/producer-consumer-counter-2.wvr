(var queue (Int) Int)
(var front back Int)
(var d w W temp Int)
(var assert Bool)

(assume (>= W 0))
(assume (= w W))
(assume (= d 0))
(assume assert)
(assume (= front back))

(par
  (while (and assert (< 0 w))
    (atomic
      (assume (= (queue back) 1))
      (set! back (+ back 1)))
    (set! w (- w 1)))
  (while assert
    (atomic
      (assume (< front back))
      (set! temp (queue front))
      (set! front (+ front 1)))
    (set! d (+ d temp)))
  (set! assert (<= d W)))

(assume (not assert))
