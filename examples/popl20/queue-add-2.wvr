(var q (Int) Int)
(var q-front q-back Int)
(var i j s N Int)
(var f Bool)

(assume (and
  (= q-front q-back)
  (>= N 0)))

(par
  (seq
    (set! i 0)
    (while (< i N)
      (atomic
        (assume (= (q q-back) 1))
        (set! q-back (+ q-back 1)))
      (set! i (+ i 1)))
    (atomic
      (assume (= (q q-back) 0))
      (set! q-back (+ q-back 1))))

  (seq
    (set! s 0)
    (set! f true)
    (while f
      (atomic
        (assume (> q-back q-front))
        (set! j (q q-front))
        (set! q-front (+ q-front 1)))
      (set! s (+ s j))
      (set! f (/= j 0)))))

(assume (not (= s N)))
