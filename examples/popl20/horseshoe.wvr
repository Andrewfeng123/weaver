(var q1 (Int) Int)
(var q1-front q1-back Int)
(var q2 (Int) Int)
(var q2-front q2-back Int)
(var i j k l s t N Int)
(var f g Bool)

(assume (and
  (= i s t 0)
  (= f g true)
  (= q1-front q1-back)
  (= q2-front q2-back)
  (>= N 0)))

(par
  (seq
    (while (< i N)
      (atomic
        (assume (= (q1 q1-back) 2))
        (set! q1-back (+ q1-back 1)))
      (set! i (+ i 1)))
    (atomic
      (assume (= (q1 q1-back) 0))
      (set! q1-back (+ q1-back 1))))

  (while f
    (atomic
      (assume (> q1-back q1-front))
      (set! j (q1 q1-front))
      (set! q1-front (+ q1-front 1)))
    (atomic
      (assume (= (q2 q2-back) (- j 1)))
      (set! q2-back (+ q2-back 1)))
    (set! s (+ s j))
    (set! f (> j 0)))

  (while g
    (atomic
      (assume (> q2-back q2-front))
      (set! k (q2 q2-front))
      (set! q2-front (+ q2-front 1)))
    (set! t (+ t k))
    (set! g (> k 0))))

(assume (not (= s (* 2 (+ t 1)))))
