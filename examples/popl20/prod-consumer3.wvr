(var queue1 (Int) Int)
(var front1 back1 Int)
(var queue2 (Int) Int)
(var front2 back2 Int)
(var d1 d2 w W temp1 temp2 Int)
(var assert Bool)

(assume (>= W 0))
(assume (= w W))
(assume (= d1 d2 0))
(assume assert)
(assume (= front1 back1))
(assume (= front2 back2))

(par
  (while (and assert (< 0 w))
    (atomic
      (assume (= (queue1 back1) 1))
      (set! back1 (+ back1 1)))
    (set! w (- w 1)))
  (while assert
    (atomic
      (assume (< front1 back1))
      (set! temp1 (queue1 front1))
      (set! front1 (+ front1 1)))
    (atomic
      (assume (= (queue2 back2) (+ temp1 1)))
      (set! back2 (+ back2 1)))
    (set! d1 (+ d1 temp1)))
  (while assert
    (atomic
      (assume (< front2 back2))
      (set! temp2 (queue2 front2))
      (set! front2 (+ front2 1)))
    (set! d2 (+ d2 temp2)))
  (set! assert (<= d2 (* 2 W))))

(assume (not assert))
